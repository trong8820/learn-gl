// CPU Path Tracing (https://raytracing.github.io/)

#include "macros.h"
#include "entry.h"

#include <vector>
#include <random>

#include "vec3.h"
#include "vec4.h"
#include "mat4.h"
#include "ray3.h"

#include <chrono>
using namespace std::chrono;

#include <thread>

#define MAX_SAMPLES_PER_PIXEL 200
#define RAY_DEPTH 6
#define SAMPLES_PER_PIXEL_NEXT_LEVEL 20
#define MAX_LEVEL 4

#define M_PI  3.1415926536f
#define M_2PI 6.2831853072f

const char * renderVertexShaderSource = R"(
#version 410 core

out vec2 vTexCoord;

void main()
{
	vTexCoord = vec2((gl_VertexID << 1) & 2, gl_VertexID & 2);
	gl_Position = vec4((vTexCoord*2.0 - 1.0), 0.0, 1.0);
}
)";

const char * renderFragmentShaderSource = R"(
#version 410 core

#define INV_SQRT_OF_2PI 0.39894228040143267793994605993439  // 1.0/SQRT_OF_2PI
#define INV_PI 0.31830988618379067153776752674503

//  smartDeNoise - parameters
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//  sampler2D tex     - sampler image / texture
//  vec2 uv           - actual fragment coord
//  float sigma  >  0 - sigma Standard Deviation
//  float kSigma >= 0 - sigma coefficient
//      kSigma * sigma  -->  radius of the circular kernel
//  float threshold   - edge sharpening threshold

vec4 smartDeNoise(sampler2D tex, vec2 uv, float sigma, float kSigma, float threshold)
{
    float radius = round(kSigma*sigma);
    float radQ = radius * radius;

    float invSigmaQx2 = .5 / (sigma * sigma);      // 1.0 / (sigma^2 * 2.0)
    float invSigmaQx2PI = INV_PI * invSigmaQx2;    // 1.0 / (sqrt(PI) * sigma)

    float invThresholdSqx2 = .5 / (threshold * threshold);     // 1.0 / (sigma^2 * 2.0)
    float invThresholdSqrt2PI = INV_SQRT_OF_2PI / threshold;   // 1.0 / (sqrt(2*PI) * sigma)

    vec4 centrPx = texture(tex,uv);

    float zBuff = 0.0;
    vec4 aBuff = vec4(0.0);
    vec2 size = vec2(textureSize(tex, 0));

    for(float x=-radius; x <= radius; x++) {
        float pt = sqrt(radQ-x*x);  // pt = yRadius: have circular trend
        for(float y=-pt; y <= pt; y++) {
            vec2 d = vec2(x,y);

            float blurFactor = exp( -dot(d , d) * invSigmaQx2 ) * invSigmaQx2PI;

            vec4 walkPx =  texture(tex,uv+d/size);

            vec4 dC = walkPx-centrPx;
            float deltaFactor = exp( -dot(dC, dC) * invThresholdSqx2) * invThresholdSqrt2PI * blurFactor;

            zBuff += deltaFactor;
            aBuff += deltaFactor*walkPx;
        }
    }
    return aBuff/zBuff;
}

uniform sampler2D texture0;

in vec2 vTexCoord;

out vec4 FragColor;

void main()
{
	// FragColor = texture(texture0, vTexCoord);
	FragColor = smartDeNoise(texture0, vTexCoord, 2.0, 2.0, 0.08);
}
)";

std::random_device rd;
std::default_random_engine re(rd());
std::uniform_real_distribution<float> two_pi_real_dist(0.0f, M_2PI);
std::uniform_real_distribution<float> real_dist(0.0f, 1.0f);
std::uniform_int_distribution<int> axis_int_dist(0, 2);
std::uniform_int_distribution<int> metal_int_dist(0, 1);

const std::vector<vec3> teapotVertices =
{
	vec3(0.4537252, 0.26190555, -0.01237479),
	vec3(0.44752464, 0.28534314, -0.01237479),
	vec3(0.45471805, 0.29315528, -0.01237479),
	vec3(0.4693506, 0.28534314, -0.01237479),
	vec3(0.48547187, 0.26190555, -0.01237479),
	vec3(0.41928142, 0.26190555, 0.16206928),
	vec3(0.41356108, 0.28534314, 0.15963574),
	vec3(0.42019612, 0.29315528, 0.16245906),
	vec3(0.43369508, 0.28534314, 0.16820285),
	vec3(0.44856662, 0.26190555, 0.17452963),
	vec3(0.32483658, 0.26190555, 0.30318037),
	vec3(0.3204341, 0.28534314, 0.29877898),
	vec3(0.3255413, 0.29315528, 0.30388507),
	vec3(0.33592993, 0.28534314, 0.31427482),
	vec3(0.3473762, 0.26190555, 0.32571998),
	vec3(0.1837255, 0.26190555, 0.3976252),
	vec3(0.18129197, 0.28534314, 0.39190486),
	vec3(0.18411528, 0.29315528, 0.39853987),
	vec3(0.18985796, 0.28534314, 0.41203886),
	vec3(0.19618584, 0.26190555, 0.4269104),
	vec3(0.009281037, 0.26190555, 0.43207008),
	vec3(0.009281037, 0.28534314, 0.42586952),
	vec3(0.009281037, 0.29315528, 0.43306184),
	vec3(0.009281037, 0.28534314, 0.4476944),
	vec3(0.009281037, 0.26190555, 0.46381566),
	vec3(-0.1772167, 0.26190555, 0.3976252),
	vec3(-0.16781531, 0.28534314, 0.39190486),
	vec3(-0.16705923, 0.29315528, 0.39853987),
	vec3(-0.17148407, 0.28534314, 0.41203886),
	vec3(-0.17762321, 0.26190555, 0.4269104),
	vec3(-0.3169887, 0.26190555, 0.30318037),
	vec3(-0.30639234, 0.28534314, 0.29877898),
	vec3(-0.30831772, 0.29315528, 0.30388507),
	vec3(-0.31753594, 0.28534314, 0.31427482),
	vec3(-0.3288147, 0.26190555, 0.32571998),
	vec3(-0.4047371, 0.26190555, 0.16206928),
	vec3(-0.39669377, 0.28534314, 0.15963574),
	vec3(-0.40213603, 0.29315528, 0.16245906),
	vec3(-0.4151961, 0.28534314, 0.16820285),
	vec3(-0.4300051, 0.26190555, 0.17452963),
	vec3(-0.43516368, 0.26190555, -0.01237479),
	vec3(-0.42896312, 0.28534314, -0.01237479),
	vec3(-0.4361554, 0.29315528, -0.01237479),
	vec3(-0.450788, 0.28534314, -0.01237479),
	vec3(-0.46690923, 0.26190555, -0.01237479),
	vec3(-0.4007188, 0.26190555, -0.18681909),
	vec3(-0.39499956, 0.28534314, -0.18438554),
	vec3(-0.40163454, 0.29315528, -0.18720885),
	vec3(-0.41513357, 0.28534314, -0.19295153),
	vec3(-0.4300051, 0.26190555, -0.19927943),
	vec3(-0.30627394, 0.26190555, -0.32793015),
	vec3(-0.30187255, 0.28534314, -0.32352766),
	vec3(-0.30697867, 0.29315528, -0.3286349),
	vec3(-0.31736842, 0.28534314, -0.3390235),
	vec3(-0.3288147, 0.26190555, -0.3504698),
	vec3(-0.16516288, 0.26190555, -0.422375),
	vec3(-0.16272932, 0.28534314, -0.41665468),
	vec3(-0.16555263, 0.29315528, -0.4232897),
	vec3(-0.17129643, 0.28534314, -0.43678865),
	vec3(-0.17762321, 0.26190555, -0.45166022),
	vec3(0.009281037, 0.26190555, -0.4568188),
	vec3(0.009281037, 0.28534314, -0.4506182),
	vec3(0.009281037, 0.29315528, -0.45781165),
	vec3(0.009281037, 0.28534314, -0.47244418),
	vec3(0.009281037, 0.26190555, -0.48856547),
	vec3(0.1837255, 0.26190555, -0.422375),
	vec3(0.18129197, 0.28534314, -0.41665468),
	vec3(0.18411528, 0.29315528, -0.4232897),
	vec3(0.18985796, 0.28534314, -0.43678865),
	vec3(0.19618584, 0.26190555, -0.45166022),
	vec3(0.32483658, 0.26190555, -0.32793015),
	vec3(0.3204341, 0.28534314, -0.32352766),
	vec3(0.3255413, 0.29315528, -0.3286349),
	vec3(0.33592993, 0.28534314, -0.3390235),
	vec3(0.3473762, 0.26190555, -0.3504698),
	vec3(0.41928142, 0.26190555, -0.18681909),
	vec3(0.41356108, 0.28534314, -0.18438554),
	vec3(0.42019612, 0.29315528, -0.18720885),
	vec3(0.43369508, 0.28534314, -0.19295153),
	vec3(0.44856662, 0.26190555, -0.19927943),
	vec3(0.54375523, 0.13727762, -0.01237479),
	vec3(0.59459835, 0.014881478, -0.01237479),
	vec3(0.63056105, -0.10305001, -0.01237479),
	vec3(0.6442019, -0.21428554, -0.01237479),
	vec3(0.5023336, 0.13727762, 0.19740653),
	vec3(0.5492366, 0.014881478, 0.21736184),
	vec3(0.5824117, -0.10305001, 0.23147729),
	vec3(0.5949949, -0.21428554, 0.23683132),
	vec3(0.38875765, 0.13727762, 0.36710146),
	vec3(0.42485654, 0.014881478, 0.40320036),
	vec3(0.45038927, -0.10305001, 0.42873418),
	vec3(0.4600743, -0.21428554, 0.4384192),
	vec3(0.21906163, 0.13727762, 0.4806774),
	vec3(0.23901804, 0.014881478, 0.5275804),
	vec3(0.2531335, -0.10305001, 0.56075543),
	vec3(0.25848755, -0.21428554, 0.57333976),
	vec3(0.009281037, 0.13727762, 0.522099),
	vec3(0.009281037, 0.014881478, 0.5729422),
	vec3(0.009281037, -0.10305001, 0.60890484),
	vec3(0.009281037, -0.21428554, 0.62254566),
	vec3(-0.20050012, 0.13727762, 0.4806774),
	vec3(-0.22045654, 0.014881478, 0.5275804),
	vec3(-0.23457088, -0.10305001, 0.56075543),
	vec3(-0.23992491, -0.21428554, 0.57333976),
	vec3(-0.37019613, 0.13727762, 0.36710146),
	vec3(-0.40629396, 0.014881478, 0.40320036),
	vec3(-0.43182775, -0.10305001, 0.42873418),
	vec3(-0.4415128, -0.21428554, 0.4384192),
	vec3(-0.48377094, 0.13727762, 0.19740653),
	vec3(-0.530674, 0.014881478, 0.21736184),
	vec3(-0.56384903, -0.10305001, 0.23147729),
	vec3(-0.57643336, -0.21428554, 0.23683132),
	vec3(-0.5251926, 0.13727762, -0.01237479),
	vec3(-0.5760369, 0.014881478, -0.01237479),
	vec3(-0.61199844, -0.10305001, -0.01237479),
	vec3(-0.6256392, -0.21428554, -0.01237479),
	vec3(-0.48377094, 0.13727762, -0.22215632),
	vec3(-0.530674, 0.014881478, -0.24211162),
	vec3(-0.56384903, -0.10305001, -0.2562271),
	vec3(-0.57643336, -0.21428554, -0.26158112),
	vec3(-0.37019613, 0.13727762, -0.39185125),
	vec3(-0.40629396, 0.014881478, -0.42795014),
	vec3(-0.43182775, -0.10305001, -0.45348287),
	vec3(-0.4415128, -0.21428554, -0.46316788),
	vec3(-0.20050012, 0.13727762, -0.5054272),
	vec3(-0.22045654, 0.014881478, -0.5523302),
	vec3(-0.23457088, -0.10305001, -0.58550525),
	vec3(-0.23992491, -0.21428554, -0.59808844),
	vec3(0.009281037, 0.13727762, -0.54684883),
	vec3(0.009281037, 0.014881478, -0.59769195),
	vec3(0.009281037, -0.10305001, -0.63365465),
	vec3(0.009281037, -0.21428554, -0.6472955),
	vec3(0.21906163, 0.13727762, -0.5054272),
	vec3(0.23901804, 0.014881478, -0.5523302),
	vec3(0.2531335, -0.10305001, -0.58550525),
	vec3(0.25848755, -0.21428554, -0.59808844),
	vec3(0.38875765, 0.13727762, -0.39185125),
	vec3(0.42485654, 0.014881478, -0.42795014),
	vec3(0.45038927, -0.10305001, -0.45348287),
	vec3(0.4600743, -0.21428554, -0.46316788),
	vec3(0.5023336, 0.13727762, -0.22215632),
	vec3(0.5492366, 0.014881478, -0.24211162),
	vec3(0.5824117, -0.10305001, -0.2562271),
	vec3(0.5949949, -0.21428554, -0.26158112),
	vec3(0.6193996, -0.3084076, -0.01237479),
	vec3(0.5648363, -0.3779753, -0.01237479),
	vec3(0.51027304, -0.4252223, -0.01237479),
	vec3(0.48547187, -0.45238, -0.01237479),
	vec3(0.5721157, -0.3084076, 0.22709712),
	vec3(0.5217807, -0.3779753, 0.20568104),
	vec3(0.47144574, -0.4252223, 0.18426493),
	vec3(0.44856662, -0.45238, 0.17452963),
	vec3(0.44246545, -0.3084076, 0.4208092),
	vec3(0.40372527, -0.3779753, 0.38207018),
	vec3(0.36498508, -0.4252223, 0.34332997),
	vec3(0.3473762, -0.45238, 0.32571998),
	vec3(0.24875224, -0.3084076, 0.5504595),
	vec3(0.22733612, -0.3779753, 0.50012565),
	vec3(0.20592004, -0.4252223, 0.44979066),
	vec3(0.19618584, -0.45238, 0.4269104),
	vec3(0.009281037, -0.3084076, 0.59774446),
	vec3(0.009281037, -0.3779753, 0.54318124),
	vec3(0.009281037, -0.4252223, 0.48861685),
	vec3(0.009281037, -0.45238, 0.46381566),
	vec3(-0.23019071, -0.3084076, 0.5504595),
	vec3(-0.20877463, -0.3779753, 0.50012565),
	vec3(-0.18735851, -0.4252223, 0.44979066),
	vec3(-0.17762321, -0.45238, 0.4269104),
	vec3(-0.42390394, -0.3084076, 0.4208092),
	vec3(-0.38516372, -0.3779753, 0.38207018),
	vec3(-0.34642357, -0.4252223, 0.34332997),
	vec3(-0.3288147, -0.45238, 0.32571998),
	vec3(-0.55355424, -0.3084076, 0.22709712),
	vec3(-0.50321925, -0.3779753, 0.20568104),
	vec3(-0.45288423, -0.4252223, 0.18426493),
	vec3(-0.4300051, -0.45238, 0.17452963),
	vec3(-0.60083807, -0.3084076, -0.01237479),
	vec3(-0.54627484, -0.3779753, -0.01237479),
	vec3(-0.49171156, -0.4252223, -0.01237479),
	vec3(-0.46690923, -0.45238, -0.01237479),
	vec3(-0.55355424, -0.3084076, -0.25184694),
	vec3(-0.50321925, -0.3779753, -0.23042972),
	vec3(-0.45288423, -0.4252223, -0.20901361),
	vec3(-0.4300051, -0.45238, -0.19927943),
	vec3(-0.42390394, -0.3084076, -0.44555902),
	vec3(-0.38516372, -0.3779753, -0.40681887),
	vec3(-0.34642357, -0.4252223, -0.36807868),
	vec3(-0.3288147, -0.45238, -0.3504698),
	vec3(-0.23019071, -0.3084076, -0.5752093),
	vec3(-0.20877463, -0.3779753, -0.5248743),
	vec3(-0.18735851, -0.4252223, -0.47453934),
	vec3(-0.17762321, -0.45238, -0.45166022),
	vec3(0.009281037, -0.3084076, -0.6224943),
	vec3(0.009281037, -0.3779753, -0.5679299),
	vec3(0.009281037, -0.4252223, -0.51336664),
	vec3(0.009281037, -0.45238, -0.48856547),
	vec3(0.24875224, -0.3084076, -0.5752093),
	vec3(0.22733612, -0.3779753, -0.5248743),
	vec3(0.20592004, -0.4252223, -0.47453934),
	vec3(0.19618584, -0.45238, -0.45166022),
	vec3(0.44246545, -0.3084076, -0.44555902),
	vec3(0.40372527, -0.3779753, -0.40681887),
	vec3(0.36498508, -0.4252223, -0.36807868),
	vec3(0.3473762, -0.45238, -0.3504698),
	vec3(0.5721157, -0.3084076, -0.25184694),
	vec3(0.5217807, -0.3779753, -0.23042972),
	vec3(0.47144574, -0.4252223, -0.20901361),
	vec3(0.44856662, -0.45238, -0.19927943),
	vec3(0.4746823, -0.469866, -0.01237479),
	vec3(0.41701874, -0.4851184, -0.01237479),
	vec3(0.274534, -0.49590686, -0.01237479),
	vec3(0.009281037, -0.5, -0.01237479),
	vec3(0.43861467, -0.469866, 0.17029576),
	vec3(0.38541952, -0.4851184, 0.14766233),
	vec3(0.2539767, -0.49590686, 0.091736995),
	vec3(0.33971596, -0.469866, 0.31806085),
	vec3(0.2987745, -0.4851184, 0.2771194),
	vec3(0.1976109, -0.49590686, 0.17595468),
	vec3(0.19195087, -0.469866, 0.41695842),
	vec3(0.16931856, -0.4851184, 0.36376327),
	vec3(0.11339277, -0.49590686, 0.2323216),
	vec3(0.009281037, -0.469866, 0.45302716),
	vec3(0.009281037, -0.4851184, 0.39536366),
	vec3(0.009281037, -0.49590686, 0.25287777),
	vec3(-0.17338936, -0.469866, 0.41695842),
	vec3(-0.15075593, -0.4851184, 0.36376327),
	vec3(-0.09483069, -0.49590686, 0.2323216),
	vec3(-0.32115445, -0.469866, 0.31806085),
	vec3(-0.280213, -0.4851184, 0.2771194),
	vec3(-0.17904827, -0.49590686, 0.17595468),
	vec3(-0.42005202, -0.469866, 0.17029576),
	vec3(-0.36685687, -0.4851184, 0.14766233),
	vec3(-0.23541519, -0.49590686, 0.091736995),
	vec3(-0.45612076, -0.469866, -0.01237479),
	vec3(-0.3984572, -0.4851184, -0.01237479),
	vec3(-0.25597247, -0.49590686, -0.01237479),
	vec3(-0.42005202, -0.469866, -0.19504446),
	vec3(-0.36685687, -0.4851184, -0.17241214),
	vec3(-0.23541519, -0.49590686, -0.116486356),
	vec3(-0.32115445, -0.469866, -0.34280953),
	vec3(-0.280213, -0.4851184, -0.3018692),
	vec3(-0.17904827, -0.49590686, -0.20070449),
	vec3(-0.17338936, -0.469866, -0.4417082),
	vec3(-0.15075593, -0.4851184, -0.38851306),
	vec3(-0.09483069, -0.49590686, -0.2570703),
	vec3(0.009281037, -0.469866, -0.477777),
	vec3(0.009281037, -0.4851184, -0.42011234),
	vec3(0.009281037, -0.49590686, -0.2776276),
	vec3(0.19195087, -0.469866, -0.4417082),
	vec3(0.16931856, -0.4851184, -0.38851306),
	vec3(0.11339277, -0.49590686, -0.2570703),
	vec3(0.33971596, -0.469866, -0.34280953),
	vec3(0.2987745, -0.4851184, -0.3018692),
	vec3(0.1976109, -0.49590686, -0.20070449),
	vec3(0.43861467, -0.469866, -0.19504446),
	vec3(0.38541952, -0.4851184, -0.17241214),
	vec3(0.2539767, -0.49590686, -0.116486356),
	vec3(-0.49865592, 0.14285722, -0.01237479),
	vec3(-0.6469693, 0.14174153, -0.01237479),
	vec3(-0.75659174, 0.13392939, -0.01237479),
	vec3(-0.8245479, 0.11272324, -0.01237479),
	vec3(-0.84786147, 0.07142891, -0.01237479),
	vec3(-0.49369502, 0.15401867, 0.041196737),
	vec3(-0.6513864, 0.15272768, 0.041196737),
	vec3(-0.7671323, 0.14369485, 0.041196737),
	vec3(-0.8384221, 0.119176224, 0.041196737),
	vec3(-0.8627431, 0.07142891, 0.041196737),
	vec3(-0.48278257, 0.17857194, 0.05905388),
	vec3(-0.66110605, 0.17689784, 0.05905388),
	vec3(-0.7903219, 0.16517906, 0.05905388),
	vec3(-0.86894363, 0.13337098, 0.05905388),
	vec3(-0.89548033, 0.07142891, 0.05905388),
	vec3(-0.47187015, 0.20312521, 0.041196737),
	vec3(-0.6708246, 0.20106801, 0.041196737),
	vec3(-0.81351155, 0.18666331, 0.041196737),
	vec3(-0.8994641, 0.14756574, 0.041196737),
	vec3(-0.9282188, 0.07142891, 0.041196737),
	vec3(-0.46690923, 0.21428666, -0.01237479),
	vec3(-0.6752427, 0.21205416, -0.01237479),
	vec3(-0.824052, 0.19642875, -0.01237479),
	vec3(-0.9133383, 0.15401867, -0.01237479),
	vec3(-0.94310033, 0.07142891, -0.01237479),
	vec3(-0.47187015, 0.20312521, -0.06594621),
	vec3(-0.6708246, 0.20106801, -0.06594621),
	vec3(-0.81351155, 0.18666331, -0.06594621),
	vec3(-0.8994641, 0.14756574, -0.06594621),
	vec3(-0.9282188, 0.07142891, -0.06594621),
	vec3(-0.48278257, 0.17857194, -0.08380335),
	vec3(-0.66110605, 0.17689784, -0.08380335),
	vec3(-0.7903219, 0.16517906, -0.08380335),
	vec3(-0.86894363, 0.13337098, -0.08380335),
	vec3(-0.89548033, 0.07142891, -0.08380335),
	vec3(-0.49369502, 0.15401867, -0.06594621),
	vec3(-0.6513864, 0.15272768, -0.06594621),
	vec3(-0.7671323, 0.14369485, -0.06594621),
	vec3(-0.8384221, 0.119176224, -0.06594621),
	vec3(-0.8627431, 0.07142891, -0.06594621),
	vec3(-0.8354614, 0.0066970144, -0.01237479),
	vec3(-0.79627454, -0.071428105, -0.01237479),
	vec3(-0.72732556, -0.14955299, -0.01237479),
	vec3(-0.6256392, -0.21428554, -0.01237479),
	vec3(-0.84898615, 0.00044805816, 0.041196737),
	vec3(-0.8058847, -0.08096113, 0.041196737),
	vec3(-0.73069715, -0.16132416, 0.041196737),
	vec3(-0.62067944, -0.22916605, 0.041196737),
	vec3(-0.8787393, -0.013299279, 0.05905388),
	vec3(-0.82702833, -0.10193397, 0.05905388),
	vec3(-0.7381151, -0.18722056, 0.05905388),
	vec3(-0.609767, -0.26190442, 0.05905388),
	vec3(-0.9084936, -0.027046744, 0.041196737),
	vec3(-0.8481719, -0.12290682, 0.041196737),
	vec3(-0.74553186, -0.21311626, 0.041196737),
	vec3(-0.59885347, -0.29464284, 0.041196737),
	vec3(-0.9220182, -0.03329557, -0.01237479),
	vec3(-0.8577822, -0.13243997, -0.01237479),
	vec3(-0.7489036, -0.2248875, -0.01237479),
	vec3(-0.5938937, -0.30952334, -0.01237479),
	vec3(-0.9084936, -0.027046744, -0.06594621),
	vec3(-0.8481719, -0.12290682, -0.06594621),
	vec3(-0.74553186, -0.21311626, -0.06594621),
	vec3(-0.59885347, -0.29464284, -0.06594621),
	vec3(-0.8787393, -0.013299279, -0.08380335),
	vec3(-0.82702833, -0.10193397, -0.08380335),
	vec3(-0.7381151, -0.18722056, -0.08380335),
	vec3(-0.609767, -0.26190442, -0.08380335),
	vec3(-0.84898615, 0.00044805816, -0.06594621),
	vec3(-0.8058847, -0.08096113, -0.06594621),
	vec3(-0.73069715, -0.16132416, -0.06594621),
	vec3(-0.62067944, -0.22916605, -0.06594621),
	vec3(0.5489641, -0.047618523, -0.01237479),
	vec3(0.7012456, -0.012648302, -0.01237479),
	vec3(0.76721716, 0.07142891, -0.01237479),
	vec3(0.80342776, 0.1733631, -0.01237479),
	vec3(0.8664241, 0.26190555, -0.01237479),
	vec3(0.5489641, -0.0885411, 0.10548234),
	vec3(0.71287054, -0.04299147, 0.09404267),
	vec3(0.7820987, 0.053757947, 0.06887528),
	vec3(0.8215637, 0.16696933, 0.043707903),
	vec3(0.8961862, 0.26190555, 0.032268114),
	vec3(0.5489641, -0.17857084, 0.14476866),
	vec3(0.7384479, -0.10974647, 0.12951516),
	vec3(0.8148361, 0.014881478, 0.095958576),
	vec3(0.8614632, 0.15290187, 0.0624021),
	vec3(0.9616619, 0.26190555, 0.047149044),
	vec3(0.5489641, -0.26860088, 0.10548234),
	vec3(0.76402414, -0.17650136, 0.09404267),
	vec3(0.8475744, -0.023994947, 0.06887528),
	vec3(0.9013626, 0.13883556, 0.043707903),
	vec3(1.0271375, 0.26190555, 0.032268114),
	vec3(0.5489641, -0.30952334, -0.01237479),
	vec3(0.7756502, -0.20684418, -0.01237479),
	vec3(0.8624561, -0.041666128, -0.01237479),
	vec3(0.91949975, 0.13244066, -0.01237479),
	vec3(1.0568997, 0.26190555, -0.01237479),
	vec3(0.5489641, -0.26860088, -0.13023216),
	vec3(0.76402414, -0.17650136, -0.11879258),
	vec3(0.8475744, -0.023994947, -0.093624756),
	vec3(0.9013626, 0.13883556, -0.06845737),
	vec3(1.0271375, 0.26190555, -0.057017583),
	vec3(0.5489641, -0.17857084, -0.16951735),
	vec3(0.7384479, -0.10974647, -0.15426496),
	vec3(0.8148361, 0.014881478, -0.12070793),
	vec3(0.8614632, 0.15290187, -0.087151565),
	vec3(0.9616619, 0.26190555, -0.07189851),
	vec3(0.5489641, -0.0885411, -0.13023216),
	vec3(0.71287054, -0.04299147, -0.11879258),
	vec3(0.7820987, 0.053757947, -0.093624756),
	vec3(0.8215637, 0.16696933, -0.06845737),
	vec3(0.8961862, 0.26190555, -0.057017583),
	vec3(0.88924074, 0.27529848, -0.01237479),
	vec3(0.9061068, 0.27976236, -0.01237479),
	vec3(0.9110667, 0.27529848, -0.01237479),
	vec3(0.8981697, 0.26190555, -0.01237479),
	vec3(0.9211147, 0.27595174, 0.029477967),
	vec3(0.93602306, 0.28080878, 0.023339598),
	vec3(0.9364687, 0.27621308, 0.01720112),
	vec3(0.918011, 0.26190555, 0.0144109735),
	vec3(0.99123746, 0.2773903, 0.04342881),
	vec3(1.0018406, 0.28311056, 0.035244323),
	vec3(0.9923543, 0.27822787, 0.02705983),
	vec3(0.9616619, 0.26190555, 0.023339598),
	vec3(1.0613602, 0.27882978, 0.029477967),
	vec3(1.067658, 0.2854123, 0.023339598),
	vec3(1.0482388, 0.2802415, 0.01720112),
	vec3(1.0053127, 0.26190555, 0.0144109735),
	vec3(1.0932342, 0.27948314, -0.01237479),
	vec3(1.0975741, 0.28645882, -0.01237479),
	vec3(1.0736408, 0.28115728, -0.01237479),
	vec3(1.025154, 0.26190555, -0.01237479),
	vec3(1.0613602, 0.27882978, -0.054227434),
	vec3(1.067658, 0.2854123, -0.04808907),
	vec3(1.0482388, 0.2802415, -0.041950587),
	vec3(1.0053127, 0.26190555, -0.03916044),
	vec3(0.99123746, 0.2773903, -0.06817828),
	vec3(1.0018406, 0.28311056, -0.059993792),
	vec3(0.9923543, 0.27822787, -0.0518093),
	vec3(0.9616619, 0.26190555, -0.04808907),
	vec3(0.9211147, 0.27595174, -0.054227434),
	vec3(0.93602306, 0.28080878, -0.04808907),
	vec3(0.9364687, 0.27621308, -0.041950587),
	vec3(0.918011, 0.26190555, -0.03916044),
	vec3(0.009281037, 0.5, -0.01237479),
	vec3(0.11741555, 0.4843757, -0.01237479),
	vec3(0.112455755, 0.44642958, -0.01237479),
	vec3(0.071781024, 0.39955455, -0.01237479),
	vec3(0.07277309, 0.35714337, -0.01237479),
	vec3(0.10907315, 0.4843757, 0.030181225),
	vec3(0.104493074, 0.44642958, 0.028221767),
	vec3(0.06694989, 0.39955455, 0.0121942),
	vec3(0.067852505, 0.35714337, 0.012545887),
	vec3(0.08615726, 0.4843757, 0.06450149),
	vec3(0.08262432, 0.44642958, 0.060968548),
	vec3(0.053689465, 0.39955455, 0.032033693),
	vec3(0.05436045, 0.35714337, 0.032704677),
	vec3(0.051836997, 0.4843757, 0.08741737),
	vec3(0.049877543, 0.44642958, 0.0828373),
	vec3(0.033849973, 0.39955455, 0.04529412),
	vec3(0.03420166, 0.35714337, 0.04619673),
	vec3(0.009281037, 0.4843757, 0.095760226),
	vec3(0.009281037, 0.44642958, 0.090799876),
	vec3(0.009281037, 0.39955455, 0.050125252),
	vec3(0.009281037, 0.35714337, 0.051117323),
	vec3(-0.033274923, 0.4843757, 0.08741737),
	vec3(-0.031315465, 0.44642958, 0.0828373),
	vec3(-0.015287899, 0.39955455, 0.04529412),
	vec3(-0.015639585, 0.35714337, 0.04619673),
	vec3(-0.06759519, 0.4843757, 0.06450149),
	vec3(-0.064062245, 0.44642958, 0.060968548),
	vec3(-0.03512739, 0.39955455, 0.032033693),
	vec3(-0.035798375, 0.35714337, 0.032704677),
	vec3(-0.09051107, 0.4843757, 0.030181225),
	vec3(-0.085930996, 0.44642958, 0.028221767),
	vec3(-0.048387818, 0.39955455, 0.0121942),
	vec3(-0.049290426, 0.35714337, 0.012545887),
	vec3(-0.09885392, 0.4843757, -0.01237479),
	vec3(-0.09389357, 0.44642958, -0.01237479),
	vec3(-0.05321895, 0.39955455, -0.01237479),
	vec3(-0.05421102, 0.35714337, -0.01237479),
	vec3(-0.09051107, 0.4843757, -0.054930694),
	vec3(-0.085930996, 0.44642958, -0.05297124),
	vec3(-0.048387818, 0.39955455, -0.03694367),
	vec3(-0.049290426, 0.35714337, -0.037295356),
	vec3(-0.06759519, 0.4843757, -0.08925096),
	vec3(-0.064062245, 0.44642958, -0.08571802),
	vec3(-0.03512739, 0.39955455, -0.056783162),
	vec3(-0.035798375, 0.35714337, -0.057454146),
	vec3(-0.033274923, 0.4843757, -0.1121665),
	vec3(-0.031315465, 0.44642958, -0.10758677),
	vec3(-0.015287899, 0.39955455, -0.070043586),
	vec3(-0.015639585, 0.35714337, -0.0709462),
	vec3(0.009281037, 0.4843757, -0.12050913),
	vec3(0.009281037, 0.44642958, -0.11554935),
	vec3(0.009281037, 0.39955455, -0.07487472),
	vec3(0.009281037, 0.35714337, -0.07586679),
	vec3(0.051836997, 0.4843757, -0.1121665),
	vec3(0.049877543, 0.44642958, -0.10758677),
	vec3(0.033849973, 0.39955455, -0.070043586),
	vec3(0.03420166, 0.35714337, -0.0709462),
	vec3(0.08615726, 0.4843757, -0.08925096),
	vec3(0.08262432, 0.44642958, -0.08571802),
	vec3(0.053689465, 0.39955455, -0.056783162),
	vec3(0.05436045, 0.35714337, -0.057454146),
	vec3(0.10907315, 0.4843757, -0.054930694),
	vec3(0.104493074, 0.44642958, -0.05297124),
	vec3(0.06694989, 0.39955455, -0.03694367),
	vec3(0.067852505, 0.35714337, -0.037295356),
	vec3(0.15412201, 0.32887, -0.01237479),
	vec3(0.27118576, 0.30952448, -0.01237479),
	vec3(0.3763442, 0.29017892, -0.01237479),
	vec3(0.42197964, 0.26190555, -0.01237479),
	vec3(0.14289688, 0.32887, 0.044475492),
	vec3(0.2508887, 0.30952448, 0.09042284),
	vec3(0.34789664, 0.29017892, 0.13169742),
	vec3(0.3899951, 0.26190555, 0.14960894),
	vec3(0.112118475, 0.32887, 0.090462595),
	vec3(0.1952332, 0.30952448, 0.1735781),
	vec3(0.26989582, 0.29017892, 0.24824074),
	vec3(0.30229697, 0.26190555, 0.28064072),
	vec3(0.066131264, 0.32887, 0.12124176),
	vec3(0.11207827, 0.30952448, 0.22923248),
	vec3(0.15335365, 0.29017892, 0.32624155),
	vec3(0.17126517, 0.26190555, 0.36834002),
	vec3(0.009281037, 0.32887, 0.13246691),
	vec3(0.009281037, 0.30952448, 0.24952953),
	vec3(0.009281037, 0.29017892, 0.35468912),
	vec3(0.009281037, 0.26190555, 0.40032345),
	vec3(-0.04756919, 0.32887, 0.12124176),
	vec3(-0.093516536, 0.30952448, 0.22923248),
	vec3(-0.134791, 0.29017892, 0.32624155),
	vec3(-0.15270254, 0.26190555, 0.36834002),
	vec3(-0.09355629, 0.32887, 0.090462595),
	vec3(-0.17667167, 0.30952448, 0.1735781),
	vec3(-0.2513343, 0.29017892, 0.24824074),
	vec3(-0.28373432, 0.26190555, 0.28064072),
	vec3(-0.124335356, 0.32887, 0.044475492),
	vec3(-0.23232608, 0.30952448, 0.09042284),
	vec3(-0.32933512, 0.29017892, 0.13169742),
	vec3(-0.3714336, 0.26190555, 0.14960894),
	vec3(-0.13556048, 0.32887, -0.01237479),
	vec3(-0.25262424, 0.30952448, -0.01237479),
	vec3(-0.35778272, 0.29017892, -0.01237479),
	vec3(-0.40341702, 0.26190555, -0.01237479),
	vec3(-0.124335356, 0.32887, -0.06922496),
	vec3(-0.23232608, 0.30952448, -0.115171865),
	vec3(-0.32933512, 0.29017892, -0.15644722),
	vec3(-0.3714336, 0.26190555, -0.17435874),
	vec3(-0.09355629, 0.32887, -0.11521207),
	vec3(-0.17667167, 0.30952448, -0.19832678),
	vec3(-0.2513343, 0.29017892, -0.27298942),
	vec3(-0.28373432, 0.26190555, -0.30539054),
	vec3(-0.04756919, 0.32887, -0.14599045),
	vec3(-0.093516536, 0.30952448, -0.2539823),
	vec3(-0.134791, 0.29017892, -0.35099024),
	vec3(-0.15270254, 0.26190555, -0.3930887),
	vec3(0.009281037, 0.32887, -0.1572156),
	vec3(0.009281037, 0.30952448, -0.27427936),
	vec3(0.009281037, 0.29017892, -0.3794378),
	vec3(0.009281037, 0.26190555, -0.42507324),
	vec3(0.066131264, 0.32887, -0.14599045),
	vec3(0.11207827, 0.30952448, -0.2539823),
	vec3(0.15335365, 0.29017892, -0.35099024),
	vec3(0.17126517, 0.26190555, -0.3930887),
	vec3(0.112118475, 0.32887, -0.11521207),
	vec3(0.1952332, 0.30952448, -0.19832678),
	vec3(0.26989582, 0.29017892, -0.27298942),
	vec3(0.30229697, 0.26190555, -0.30539054),
	vec3(0.14289688, 0.32887, -0.06922496),
	vec3(0.2508887, 0.30952448, -0.115171865),
	vec3(0.34789664, 0.29017892, -0.15644722),
	vec3(0.3899951, 0.26190555, -0.17435874)
};

const std::vector<vec3> teapotNormals =
{
	vec3(-0.966742, -0.255752, 0.0),
    vec3(-0.966824, 0.255443, 0.0),
    vec3(-0.092052, 0.995754, 0.0),
    vec3(0.68205, 0.731305, 0.0),
    vec3(0.870301, 0.492521, -0.0),
    vec3(-0.893014, -0.256345, -0.369882),
    vec3(-0.893437, 0.255997, -0.369102),
    vec3(-0.0838771, 0.995843, -0.0355068),
    vec3(0.629724, 0.73186, 0.260439),
    vec3(0.803725, 0.49337, 0.332584),
    vec3(-0.683407, -0.256729, -0.683407),
    vec3(-0.683531, 0.256067, -0.683531),
    vec3(-0.0649249, 0.995776, -0.0649248),
    vec3(0.481398, 0.732469, 0.481398),
    vec3(0.614804, 0.493997, 0.614804),
    vec3(-0.369882, -0.256345, -0.893014),
    vec3(-0.369102, 0.255997, -0.893437),
    vec3(-0.0355067, 0.995843, -0.0838772),
    vec3(0.260439, 0.73186, 0.629724),
    vec3(0.332584, 0.49337, 0.803725),
    vec3(-0.00284834, -0.257863, -0.966177),
    vec3(-0.00192311, 0.254736, -0.967009),
    vec3(-0.000266114, 0.995734, -0.0922702),
    vec3(0.0, 0.731295, 0.682061),
    vec3(0.0, 0.492521, 0.870301),
    vec3(0.379058, -0.3593, -0.852771),
    vec3(0.37711, 0.149086, -0.914091),
    vec3(0.0275022, 0.992081, -0.122551),
    vec3(-0.26101, 0.726762, 0.635367),
    vec3(-0.332485, 0.492546, 0.804271),
    vec3(0.663548, -0.410791, -0.625264),
    vec3(0.712664, 0.0737216, -0.697621),
    vec3(0.0997268, 0.987509, -0.121984),
    vec3(-0.48732, 0.723754, 0.488568),
    vec3(-0.615242, 0.492602, 0.615484),
    vec3(0.880028, -0.332908, -0.338709),
    vec3(0.917276, 0.167113, -0.361493),
    vec3(0.113584, 0.992365, -0.0480695),
    vec3(-0.63415, 0.727508, 0.261889),
    vec3(-0.804126, 0.492634, 0.332705),
    vec3(0.96669, -0.255738, 0.0104537),
    vec3(0.967442, 0.252962, 0.00810329),
    vec3(0.0934365, 0.995624, 0.00128063),
    vec3(-0.682167, 0.731196, -0.00034353),
    vec3(-0.870322, 0.492483, -0.0),
    vec3(0.893014, -0.256345, 0.369882),
    vec3(0.893437, 0.255997, 0.369102),
    vec3(0.0838768, 0.995843, 0.0355066),
    vec3(-0.629724, 0.73186, -0.260439),
    vec3(-0.803725, 0.49337, -0.332584),
    vec3(0.683407, -0.256729, 0.683407),
    vec3(0.683531, 0.256067, 0.683531),
    vec3(0.0649249, 0.995776, 0.0649249),
    vec3(-0.481398, 0.732469, -0.481398),
    vec3(-0.614804, 0.493997, -0.614804),
    vec3(0.369882, -0.256345, 0.893014),
    vec3(0.369102, 0.255997, 0.893437),
    vec3(0.0355067, 0.995843, 0.083877),
    vec3(-0.260439, 0.73186, -0.629724),
    vec3(-0.332584, 0.49337, -0.803725),
    vec3(0.0, -0.255752, 0.966742),
    vec3(0.0, 0.255443, 0.966824),
    vec3(0.0, 0.995754, 0.092052),
    vec3(0.0, 0.731305, -0.68205),
    vec3(-0.0, 0.492521, -0.870301),
    vec3(-0.369882, -0.256345, 0.893014),
    vec3(-0.369102, 0.255996, 0.893437),
    vec3(-0.0355068, 0.995843, 0.0838771),
    vec3(0.260439, 0.73186, -0.629724),
    vec3(0.332584, 0.49337, -0.803725),
    vec3(-0.683407, -0.256729, 0.683407),
    vec3(-0.683531, 0.256067, 0.683531),
    vec3(-0.0649249, 0.995776, 0.064925),
    vec3(0.481398, 0.732469, -0.481398),
    vec3(0.614804, 0.493997, -0.614804),
    vec3(-0.893014, -0.256345, 0.369882),
    vec3(-0.893437, 0.255997, 0.369102),
    vec3(-0.0838767, 0.995843, 0.0355066),
    vec3(0.629724, 0.73186, -0.260439),
    vec3(0.803725, 0.49337, -0.332584),
    vec3(0.915321, 0.402725, 0.0),
    vec3(0.941808, 0.336151, -0.0),
    vec3(0.97869, 0.205342, 0.0),
    vec3(0.997804, -0.0662397, 0.0),
    vec3(0.845438, 0.403546, 0.349835),
    vec3(0.869996, 0.336859, 0.360047),
    vec3(0.904193, 0.205791, 0.37428),
    vec3(0.921879, -0.0663697, 0.381752),
    vec3(0.646802, 0.404096, 0.646802),
    vec3(0.665655, 0.337351, 0.665655),
    vec3(0.691923, 0.20612, 0.691923),
    vec3(0.705542, -0.0664796, 0.705543),
    vec3(0.349835, 0.403546, 0.845438),
    vec3(0.360047, 0.336859, 0.869996),
    vec3(0.37428, 0.205791, 0.904193),
    vec3(0.381752, -0.0663697, 0.921879),
    vec3(-0.0, 0.402725, 0.915321),
    vec3(0.0, 0.336151, 0.941808),
    vec3(-0.0, 0.205342, 0.97869),
    vec3(-0.0, -0.0662397, 0.997804),
    vec3(-0.349835, 0.403546, 0.845438),
    vec3(-0.360047, 0.336859, 0.869996),
    vec3(-0.37428, 0.205791, 0.904193),
    vec3(-0.381752, -0.0663697, 0.921879),
    vec3(-0.646802, 0.404096, 0.646802),
    vec3(-0.665655, 0.337351, 0.665655),
    vec3(-0.691923, 0.20612, 0.691923),
    vec3(-0.705543, -0.0664796, 0.705543),
    vec3(-0.845438, 0.403546, 0.349835),
    vec3(-0.869996, 0.336859, 0.360047),
    vec3(-0.904193, 0.205791, 0.37428),
    vec3(-0.921879, -0.0663697, 0.381752),
    vec3(-0.915321, 0.402725, -0.0),
    vec3(-0.941808, 0.336151, -0.0),
    vec3(-0.97869, 0.205342, -0.0),
    vec3(-0.997804, -0.0662397, -0.0),
    vec3(-0.845438, 0.403546, -0.349835),
    vec3(-0.869996, 0.336859, -0.360047),
    vec3(-0.904193, 0.205791, -0.37428),
    vec3(-0.921879, -0.0663697, -0.381752),
    vec3(-0.646802, 0.404096, -0.646802),
    vec3(-0.665655, 0.337351, -0.665655),
    vec3(-0.691923, 0.20612, -0.691923),
    vec3(-0.705542, -0.0664796, -0.705543),
    vec3(-0.349835, 0.403546, -0.845438),
    vec3(-0.360047, 0.336859, -0.869996),
    vec3(-0.37428, 0.205791, -0.904193),
    vec3(-0.381752, -0.0663697, -0.921879),
    vec3(0.0, 0.402725, -0.915321),
    vec3(-0.0, 0.336151, -0.941808),
    vec3(0.0, 0.205342, -0.97869),
    vec3(0.0, -0.0662397, -0.997804),
    vec3(0.349835, 0.403546, -0.845438),
    vec3(0.360047, 0.336859, -0.869996),
    vec3(0.37428, 0.205791, -0.904193),
    vec3(0.381752, -0.0663697, -0.921879),
    vec3(0.646802, 0.404096, -0.646802),
    vec3(0.665655, 0.337351, -0.665655),
    vec3(0.691923, 0.20612, -0.691923),
    vec3(0.705543, -0.0664796, -0.705542),
    vec3(0.845438, 0.403546, -0.349835),
    vec3(0.869996, 0.336859, -0.360047),
    vec3(0.904193, 0.205791, -0.37428),
    vec3(0.921879, -0.0663697, -0.381752),
    vec3(0.900182, -0.435513, -0.0),
    vec3(0.729611, -0.683863, -0.0),
    vec3(0.693951, -0.720022, -0.0),
    vec3(0.79395, -0.607984, 0.0),
    vec3(0.831437, -0.43618, 0.344179),
    vec3(0.673512, -0.684665, 0.278594),
    vec3(0.640399, -0.720924, 0.264874),
    vec3(0.732949, -0.608996, 0.303166),
    vec3(0.636092, -0.436777, 0.636092),
    vec3(0.514965, -0.685289, 0.514965),
    vec3(0.489651, -0.721446, 0.489651),
    vec3(0.560555, -0.609554, 0.560555),
    vec3(0.344179, -0.43618, 0.831437),
    vec3(0.278594, -0.684665, 0.673512),
    vec3(0.264874, -0.720924, 0.640399),
    vec3(0.303166, -0.608996, 0.732949),
    vec3(0.0, -0.435513, 0.900182),
    vec3(-0.0, -0.683863, 0.729611),
    vec3(0.0, -0.720022, 0.693951),
    vec3(-0.0, -0.607984, 0.79395),
    vec3(-0.344179, -0.43618, 0.831437),
    vec3(-0.278594, -0.684665, 0.673512),
    vec3(-0.264874, -0.720924, 0.640399),
    vec3(-0.303166, -0.608996, 0.732949),
    vec3(-0.636092, -0.436777, 0.636092),
    vec3(-0.514965, -0.685289, 0.514965),
    vec3(-0.489651, -0.721446, 0.489651),
    vec3(-0.560555, -0.609554, 0.560555),
    vec3(-0.831437, -0.43618, 0.344179),
    vec3(-0.673512, -0.684665, 0.278595),
    vec3(-0.640399, -0.720924, 0.264874),
    vec3(-0.732949, -0.608996, 0.303166),
    vec3(-0.900182, -0.435513, -0.0),
    vec3(-0.729611, -0.683863, -0.0),
    vec3(-0.693951, -0.720022, 0.0),
    vec3(-0.79395, -0.607983, -0.0),
    vec3(-0.831437, -0.43618, -0.344179),
    vec3(-0.673512, -0.684665, -0.278594),
    vec3(-0.640399, -0.720924, -0.264874),
    vec3(-0.732949, -0.608996, -0.303166),
    vec3(-0.636092, -0.436777, -0.636092),
    vec3(-0.514965, -0.685289, -0.514965),
    vec3(-0.489651, -0.721446, -0.489651),
    vec3(-0.560555, -0.609554, -0.560555),
    vec3(-0.344179, -0.43618, -0.831437),
    vec3(-0.278594, -0.684665, -0.673512),
    vec3(-0.264874, -0.720924, -0.640399),
    vec3(-0.303166, -0.608996, -0.732949),
    vec3(-0.0, -0.435513, -0.900182),
    vec3(0.0, -0.683863, -0.729611),
    vec3(-0.0, -0.720022, -0.693951),
    vec3(0.0, -0.607984, -0.79395),
    vec3(0.344179, -0.43618, -0.831437),
    vec3(0.278594, -0.684665, -0.673512),
    vec3(0.264874, -0.720924, -0.640399),
    vec3(0.303167, -0.608996, -0.732949),
    vec3(0.636092, -0.436777, -0.636092),
    vec3(0.514965, -0.685289, -0.514965),
    vec3(0.489651, -0.721446, -0.489651),
    vec3(0.560555, -0.609554, -0.560555),
    vec3(0.831437, -0.43618, -0.344179),
    vec3(0.673512, -0.684665, -0.278595),
    vec3(0.640399, -0.720924, -0.264874),
    vec3(0.732949, -0.608996, -0.303166),
    vec3(0.62386, -0.781536, 0.0),
    vec3(0.177291, -0.984159, -0.0),
    vec3(0.0492072, -0.998789, 0.0),
    vec3(0.0, -1.0, -0.0),
    vec3(0.576229, -0.781801, 0.238217),
    vec3(0.163629, -0.984208, 0.0675273),
    vec3(0.0454217, -0.998792, 0.0187357),
    vec3(0.440416, -0.782348, 0.440416),
    vec3(0.124903, -0.984276, 0.124903),
    vec3(0.0346621, -0.998798, 0.0346621),
    vec3(0.238217, -0.781801, 0.576229),
    vec3(0.0675273, -0.984208, 0.163629),
    vec3(0.0187357, -0.998792, 0.0454217),
    vec3(-0.0, -0.781536, 0.62386),
    vec3(0.0, -0.984159, 0.177291),
    vec3(-0.0, -0.998789, 0.0492072),
    vec3(-0.238216, -0.781801, 0.576229),
    vec3(-0.0675273, -0.984208, 0.163629),
    vec3(-0.0187357, -0.998792, 0.0454217),
    vec3(-0.440416, -0.782348, 0.440416),
    vec3(-0.124903, -0.984276, 0.124903),
    vec3(-0.0346621, -0.998798, 0.0346621),
    vec3(-0.576229, -0.781801, 0.238217),
    vec3(-0.163629, -0.984208, 0.0675273),
    vec3(-0.0454217, -0.998792, 0.0187357),
    vec3(-0.62386, -0.781536, -0.0),
    vec3(-0.177291, -0.984159, 0.0),
    vec3(-0.0492072, -0.998789, -0.0),
    vec3(-0.576229, -0.781801, -0.238217),
    vec3(-0.163629, -0.984208, -0.0675273),
    vec3(-0.0454217, -0.998792, -0.0187357),
    vec3(-0.440416, -0.782348, -0.440416),
    vec3(-0.124903, -0.984276, -0.124903),
    vec3(-0.0346621, -0.998798, -0.0346621),
    vec3(-0.238217, -0.781801, -0.576229),
    vec3(-0.0675273, -0.984208, -0.163629),
    vec3(-0.0187357, -0.998792, -0.0454217),
    vec3(0.0, -0.781536, -0.62386),
    vec3(-0.0, -0.984159, -0.177291),
    vec3(0.0, -0.998789, -0.0492072),
    vec3(0.238217, -0.781801, -0.576229),
    vec3(0.0675273, -0.984208, -0.163629),
    vec3(0.0187357, -0.998792, -0.0454217),
    vec3(0.440416, -0.782348, -0.440416),
    vec3(0.124903, -0.984276, -0.124903),
    vec3(0.0346621, -0.998798, -0.0346621),
    vec3(0.576229, -0.781801, -0.238217),
    vec3(0.163629, -0.984208, -0.0675273),
    vec3(0.0454217, -0.998792, -0.0187357),
    vec3(0.00778619, -0.99997, -0.000215809),
    vec3(0.0391385, -0.999233, -0.000988567),
    vec3(0.179511, -0.983746, -0.00436856),
    vec3(0.6123, -0.790556, -0.0104598),
    vec3(0.986152, -0.165707, -0.00666949),
    vec3(0.00703893, -0.812495, 0.582926),
    vec3(0.0361273, -0.837257, 0.545614),
    vec3(0.161845, -0.810421, 0.563048),
    vec3(0.482365, -0.595148, 0.642746),
    vec3(0.73872, -0.114593, 0.664199),
    vec3(-0.00190867, 0.162121, 0.986769),
    vec3(0.0027616, 0.0171073, 0.99985),
    vec3(0.0105326, 0.0733989, 0.997247),
    vec3(-0.0660406, 0.130069, 0.989303),
    vec3(-0.0944272, 0.0165946, 0.995393),
    vec3(-0.009203, 0.871509, 0.490293),
    vec3(-0.0486064, 0.840609, 0.539457),
    vec3(-0.223298, 0.802881, 0.552739),
    vec3(-0.596365, 0.559971, 0.575135),
    vec3(-0.803337, 0.0682361, 0.591602),
    vec3(-0.0105609, 0.999944, 0.000103364),
    vec3(-0.0587986, 0.99827, 0.000709759),
    vec3(-0.28071, 0.959787, 0.00326876),
    vec3(-0.749723, 0.661738, 0.0042684),
    vec3(-0.997351, 0.0727144, 0.00205923),
    vec3(-0.00879197, 0.871493, -0.49033),
    vec3(-0.0464937, 0.841178, -0.538756),
    vec3(-0.217909, 0.806807, -0.549161),
    vec3(-0.597291, 0.560026, -0.574121),
    vec3(-0.804, 0.0629127, -0.591291),
    vec3(-0.00180555, 0.161691, -0.98684),
    vec3(0.00203087, 0.014555, -0.999892),
    vec3(0.00921499, 0.0600698, -0.998152),
    vec3(-0.0593333, 0.113865, -0.991723),
    vec3(-0.0868992, 0.0122903, -0.996141),
    vec3(0.00641779, -0.812379, -0.583094),
    vec3(0.0337833, -0.837512, -0.545373),
    vec3(0.157112, -0.811947, -0.56219),
    vec3(0.484407, -0.589365, -0.646528),
    vec3(0.73887, -0.10132, -0.666187),
    vec3(0.946512, 0.32265, -0.0033571),
    vec3(0.82583, 0.56387, -0.00745213),
    vec3(0.650011, 0.759893, -0.00693681),
    vec3(0.532429, 0.846458, -0.00524544),
    vec3(0.725608, 0.259351, 0.637362),
    vec3(0.645945, 0.461988, 0.607719),
    vec3(0.531614, 0.63666, 0.558615),
    vec3(0.424964, 0.681717, 0.59554),
    vec3(-0.0495616, -0.019755, 0.998576),
    vec3(-0.0378162, -0.0356243, 0.99865),
    vec3(-0.0379139, -0.0365122, 0.998614),
    vec3(-0.168854, -0.297946, 0.93953),
    vec3(-0.742342, -0.299166, 0.599523),
    vec3(-0.619602, -0.529406, 0.579503),
    vec3(-0.483708, -0.685761, 0.543837),
    vec3(-0.445293, -0.794355, 0.413176),
    vec3(-0.926513, -0.376257, 0.00199587),
    vec3(-0.75392, -0.656952, 0.00431723),
    vec3(-0.566224, -0.824244, 0.00346105),
    vec3(-0.481804, -0.876277, 0.00185047),
    vec3(-0.744675, -0.294424, -0.598977),
    vec3(-0.621949, -0.528114, -0.578165),
    vec3(-0.481171, -0.68834, -0.542828),
    vec3(-0.438055, -0.797035, -0.415744),
    vec3(-0.0443368, -0.0170558, -0.998871),
    vec3(-0.0261761, -0.0281665, -0.99926),
    vec3(-0.0252939, -0.0283323, -0.999278),
    vec3(-0.157482, -0.289392, -0.944167),
    vec3(0.728244, 0.25241, -0.637142),
    vec3(0.647055, 0.459725, -0.608254),
    vec3(0.522994, 0.640657, -0.562171),
    vec3(0.409978, 0.682857, -0.604669),
    vec3(-0.230787, 0.972982, -0.00652338),
    vec3(-0.548936, 0.835863, -0.00151111),
    vec3(-0.875671, 0.482807, 0.00989278),
    vec3(-0.877554, 0.479097, 0.0190923),
    vec3(-0.69619, 0.717439, 0.024497),
    vec3(-0.152878, 0.687211, 0.71019),
    vec3(-0.316721, 0.63775, 0.702113),
    vec3(-0.601067, 0.471452, 0.64533),
    vec3(-0.635889, 0.44609, 0.6298),
    vec3(-0.435746, 0.601008, 0.670011),
    vec3(0.111112, -0.0850694, 0.99016),
    vec3(0.22331, 0.00654036, 0.974726),
    vec3(0.190097, 0.154964, 0.969458),
    vec3(0.00527077, 0.189482, 0.98187),
    vec3(-0.0117518, 0.246688, 0.969024),
    vec3(0.343906, -0.722796, 0.599412),
    vec3(0.572489, -0.567656, 0.591627),
    vec3(0.787436, -0.256459, 0.560512),
    vec3(0.647097, -0.306374, 0.698141),
    vec3(0.427528, -0.499343, 0.753576),
    vec3(0.410926, -0.911668, 0.00128446),
    vec3(0.67152, -0.740986, -0.000899122),
    vec3(0.922026, -0.38706, -0.00725269),
    vec3(0.84691, -0.531556, -0.0138542),
    vec3(0.535925, -0.8442, -0.0105045),
    vec3(0.341188, -0.722822, -0.600931),
    vec3(0.578664, -0.561139, -0.591838),
    vec3(0.784869, -0.25102, -0.566542),
    vec3(0.642681, -0.302257, -0.70399),
    vec3(0.418589, -0.500042, -0.758117),
    vec3(0.115806, -0.0791394, -0.990114),
    vec3(0.232811, 0.0125652, -0.972441),
    vec3(0.206662, 0.153601, -0.96628),
    vec3(0.0244996, 0.161443, -0.986578),
    vec3(0.00338193, 0.211115, -0.977455),
    vec3(-0.134912, 0.687491, -0.713551),
    vec3(-0.31954, 0.633073, -0.705062),
    vec3(-0.603902, 0.461442, -0.649903),
    vec3(-0.631816, 0.437169, -0.640072),
    vec3(-0.424306, 0.612706, -0.66675),
    vec3(-0.4258, 0.904753, 0.0108049),
    vec3(0.0220472, 0.999756, 0.00162273),
    vec3(0.999599, 0.0258705, 0.0115556),
    vec3(0.709585, -0.704553, 0.00967183),
    vec3(-0.259858, 0.791936, 0.552549),
    vec3(0.00953916, 0.99972, -0.0216718),
    vec3(0.410156, 0.332912, -0.849083),
    vec3(0.541523, -0.54862, -0.637),
    vec3(0.0463104, 0.455224, 0.889172),
    vec3(-0.0106883, 0.988794, 0.148901),
    vec3(-0.0443756, 0.682947, -0.729118),
    vec3(0.122825, 0.00923214, -0.992385),
    vec3(0.481839, -0.180439, 0.85748),
    vec3(0.455272, 0.736752, 0.499925),
    vec3(-0.220542, 0.907193, -0.358276),
    vec3(-0.23592, 0.657249, -0.715797),
    vec3(0.728092, -0.685302, -0.0155853),
    vec3(0.888739, 0.45811, -0.0166791),
    vec3(-0.260097, 0.965582, 0.000800195),
    vec3(-0.371612, 0.928378, -0.00441745),
    vec3(0.480166, -0.17836, -0.858853),
    vec3(0.488103, 0.716801, -0.497947),
    vec3(-0.222004, 0.905399, 0.361893),
    vec3(-0.235405, 0.66318, 0.710477),
    vec3(0.0587203, 0.437704, -0.8972),
    vec3(0.00132612, 0.986459, -0.164003),
    vec3(-0.0441901, 0.681677, 0.730317),
    vec3(0.138801, -0.0341896, 0.98973),
    vec3(-0.25889, 0.797206, -0.54538),
    vec3(0.0122703, 0.999739, 0.0192865),
    vec3(0.39863, 0.35489, 0.845663),
    vec3(0.537564, -0.5814, 0.610737),
    vec3(-0.0, 1.0, 0.0),
    vec3(0.82454, 0.565804, 0.0),
    vec3(0.917701, -0.397272, 0.0),
    vec3(0.935269, -0.353939, 0.000112842),
    vec3(0.780712, 0.624891, 0.0),
    vec3(0.762641, 0.565035, 0.314825),
    vec3(0.847982, -0.397998, 0.350034),
    vec3(0.864141, -0.355261, 0.356441),
    vec3(0.720991, 0.625625, 0.297933),
    vec3(0.583357, 0.565165, 0.583338),
    vec3(0.648485, -0.398726, 0.648448),
    vec3(0.660872, -0.355894, 0.660748),
    vec3(0.551862, 0.62529, 0.55178),
    vec3(0.314824, 0.565051, 0.762629),
    vec3(0.350045, -0.397976, 0.847988),
    vec3(0.356474, -0.3552, 0.864153),
    vec3(0.297983, 0.625515, 0.721067),
    vec3(-0.0, 0.565804, 0.82454),
    vec3(-0.0, -0.397272, 0.917701),
    vec3(-0.000112839, -0.353939, 0.935269),
    vec3(-0.0, 0.624891, 0.780712),
    vec3(-0.314825, 0.565035, 0.762641),
    vec3(-0.350034, -0.397998, 0.847982),
    vec3(-0.356441, -0.355261, 0.864141),
    vec3(-0.297933, 0.625625, 0.720991),
    vec3(-0.583338, 0.565165, 0.583357),
    vec3(-0.648448, -0.398726, 0.648485),
    vec3(-0.660748, -0.355894, 0.660872),
    vec3(-0.55178, 0.62529, 0.551862),
    vec3(-0.762629, 0.565051, 0.314824),
    vec3(-0.847988, -0.397976, 0.350045),
    vec3(-0.864153, -0.3552, 0.356474),
    vec3(-0.721067, 0.625515, 0.297983),
    vec3(-0.82454, 0.565804, -0.0),
    vec3(-0.917701, -0.397272, -0.0),
    vec3(-0.935269, -0.353939, -0.000112839),
    vec3(-0.780712, 0.624891, -0.0),
    vec3(-0.76264, 0.565035, -0.314825),
    vec3(-0.847982, -0.397998, -0.350034),
    vec3(-0.864141, -0.355261, -0.356441),
    vec3(-0.720991, 0.625625, -0.297933),
    vec3(-0.583357, 0.565165, -0.583338),
    vec3(-0.648485, -0.398726, -0.648448),
    vec3(-0.660872, -0.355894, -0.660748),
    vec3(-0.551862, 0.62529, -0.55178),
    vec3(-0.314824, 0.565051, -0.762629),
    vec3(-0.350045, -0.397976, -0.847988),
    vec3(-0.356474, -0.3552, -0.864153),
    vec3(-0.297983, 0.625515, -0.721067),
    vec3(0.0, 0.565804, -0.82454),
    vec3(0.0, -0.397272, -0.917701),
    vec3(0.000112839, -0.353939, -0.935269),
    vec3(0.0, 0.624891, -0.780712),
    vec3(0.314825, 0.565035, -0.762641),
    vec3(0.350034, -0.397998, -0.847982),
    vec3(0.356441, -0.355261, -0.864141),
    vec3(0.297933, 0.625625, -0.720991),
    vec3(0.583338, 0.565165, -0.583357),
    vec3(0.648448, -0.398726, -0.648485),
    vec3(0.660748, -0.355894, -0.660872),
    vec3(0.55178, 0.62529, -0.551862),
    vec3(0.762629, 0.565051, -0.314824),
    vec3(0.847988, -0.397976, -0.350045),
    vec3(0.864153, -0.3552, -0.356474),
    vec3(0.721067, 0.625515, -0.297983),
    vec3(0.236584, 0.971611, 0.0),
    vec3(0.173084, 0.984907, -0.0),
    vec3(0.379703, 0.925108, 0.0),
    vec3(0.526673, 0.850068, 0.0),
    vec3(0.217978, 0.971775, 0.0902162),
    vec3(0.15959, 0.984977, 0.0659615),
    vec3(0.350498, 0.925312, 0.14474),
    vec3(0.48559, 0.850653, 0.201474),
    vec3(0.166631, 0.971838, 0.166631),
    vec3(0.121908, 0.985026, 0.121908),
    vec3(0.267668, 0.925585, 0.267668),
    vec3(0.371315, 0.851029, 0.371315),
    vec3(0.0902162, 0.971775, 0.217978),
    vec3(0.0659615, 0.984977, 0.15959),
    vec3(0.14474, 0.925312, 0.350498),
    vec3(0.201474, 0.850653, 0.48559),
    vec3(-0.0, 0.971611, 0.236584),
    vec3(0.0, 0.984907, 0.173084),
    vec3(0.0, 0.925108, 0.379703),
    vec3(0.0, 0.850068, 0.526673),
    vec3(-0.0902162, 0.971775, 0.217978),
    vec3(-0.0659615, 0.984977, 0.15959),
    vec3(-0.14474, 0.925312, 0.350498),
    vec3(-0.201474, 0.850653, 0.48559),
    vec3(-0.166631, 0.971838, 0.166631),
    vec3(-0.121908, 0.985026, 0.121908),
    vec3(-0.267668, 0.925585, 0.267668),
    vec3(-0.371315, 0.851029, 0.371315),
    vec3(-0.217978, 0.971775, 0.0902162),
    vec3(-0.15959, 0.984977, 0.0659615),
    vec3(-0.350498, 0.925312, 0.14474),
    vec3(-0.48559, 0.850653, 0.201474),
    vec3(-0.236583, 0.971611, -0.0),
    vec3(-0.173084, 0.984907, 0.0),
    vec3(-0.379703, 0.925108, -0.0),
    vec3(-0.526673, 0.850068, 0.0),
    vec3(-0.217978, 0.971775, -0.0902162),
    vec3(-0.15959, 0.984977, -0.0659615),
    vec3(-0.350498, 0.925312, -0.14474),
    vec3(-0.48559, 0.850653, -0.201474),
    vec3(-0.166631, 0.971838, -0.166631),
    vec3(-0.121908, 0.985026, -0.121908),
    vec3(-0.267668, 0.925585, -0.267668),
    vec3(-0.371315, 0.851029, -0.371315),
    vec3(-0.0902162, 0.971775, -0.217978),
    vec3(-0.0659615, 0.984977, -0.15959),
    vec3(-0.14474, 0.925312, -0.350498),
    vec3(-0.201474, 0.850653, -0.485589),
    vec3(0.0, 0.971611, -0.236584),
    vec3(-0.0, 0.984907, -0.173084),
    vec3(-0.0, 0.925108, -0.379703),
    vec3(-0.0, 0.850068, -0.526673),
    vec3(0.0902162, 0.971775, -0.217978),
    vec3(0.0659615, 0.984977, -0.15959),
    vec3(0.14474, 0.925312, -0.350498),
    vec3(0.201474, 0.850653, -0.48559),
    vec3(0.166631, 0.971838, -0.166631),
    vec3(0.121908, 0.985026, -0.121908),
    vec3(0.267668, 0.925585, -0.267668),
    vec3(0.371315, 0.851029, -0.371315),
    vec3(0.217978, 0.971775, -0.0902162),
    vec3(0.15959, 0.984977, -0.0659615),
    vec3(0.350498, 0.925312, -0.14474),
    vec3(0.48559, 0.850653, -0.201474)
};

const std::vector<int> teapotIndices =
{
	6, 5, 0,
	0, 1, 6,
	7, 6, 1,
	1, 2, 7,
	8, 7, 2,
	2, 3, 8,
	9, 8, 3,
	3, 4, 9,
	11, 10, 5,
	5, 6, 11,
	12, 11, 6,
	6, 7, 12,
	13, 12, 7,
	7, 8, 13,
	14, 13, 8,
	8, 9, 14,
	16, 15, 10,
	10, 11, 16,
	17, 16, 11,
	11, 12, 17,
	18, 17, 12,
	12, 13, 18,
	19, 18, 13,
	13, 14, 19,
	21, 20, 15,
	15, 16, 21,
	22, 21, 16,
	16, 17, 22,
	23, 22, 17,
	17, 18, 23,
	24, 23, 18,
	18, 19, 24,
	26, 25, 20,
	20, 21, 26,
	27, 26, 21,
	21, 22, 27,
	28, 27, 22,
	22, 23, 28,
	29, 28, 23,
	23, 24, 29,
	31, 30, 25,
	25, 26, 31,
	32, 31, 26,
	26, 27, 32,
	33, 32, 27,
	27, 28, 33,
	34, 33, 28,
	28, 29, 34,
	36, 35, 30,
	30, 31, 36,
	37, 36, 31,
	31, 32, 37,
	38, 37, 32,
	32, 33, 38,
	39, 38, 33,
	33, 34, 39,
	41, 40, 35,
	35, 36, 41,
	42, 41, 36,
	36, 37, 42,
	43, 42, 37,
	37, 38, 43,
	44, 43, 38,
	38, 39, 44,
	46, 45, 40,
	40, 41, 46,
	47, 46, 41,
	41, 42, 47,
	48, 47, 42,
	42, 43, 48,
	49, 48, 43,
	43, 44, 49,
	51, 50, 45,
	45, 46, 51,
	52, 51, 46,
	46, 47, 52,
	53, 52, 47,
	47, 48, 53,
	54, 53, 48,
	48, 49, 54,
	56, 55, 50,
	50, 51, 56,
	57, 56, 51,
	51, 52, 57,
	58, 57, 52,
	52, 53, 58,
	59, 58, 53,
	53, 54, 59,
	61, 60, 55,
	55, 56, 61,
	62, 61, 56,
	56, 57, 62,
	63, 62, 57,
	57, 58, 63,
	64, 63, 58,
	58, 59, 64,
	66, 65, 60,
	60, 61, 66,
	67, 66, 61,
	61, 62, 67,
	68, 67, 62,
	62, 63, 68,
	69, 68, 63,
	63, 64, 69,
	71, 70, 65,
	65, 66, 71,
	72, 71, 66,
	66, 67, 72,
	73, 72, 67,
	67, 68, 73,
	74, 73, 68,
	68, 69, 74,
	76, 75, 70,
	70, 71, 76,
	77, 76, 71,
	71, 72, 77,
	78, 77, 72,
	72, 73, 78,
	79, 78, 73,
	73, 74, 79,
	1, 0, 75,
	75, 76, 1,
	2, 1, 76,
	76, 77, 2,
	3, 2, 77,
	77, 78, 3,
	4, 3, 78,
	78, 79, 4,
	84, 9, 4,
	4, 80, 84,
	85, 84, 80,
	80, 81, 85,
	86, 85, 81,
	81, 82, 86,
	87, 86, 82,
	82, 83, 87,
	88, 14, 9,
	9, 84, 88,
	89, 88, 84,
	84, 85, 89,
	90, 89, 85,
	85, 86, 90,
	91, 90, 86,
	86, 87, 91,
	92, 19, 14,
	14, 88, 92,
	93, 92, 88,
	88, 89, 93,
	94, 93, 89,
	89, 90, 94,
	95, 94, 90,
	90, 91, 95,
	96, 24, 19,
	19, 92, 96,
	97, 96, 92,
	92, 93, 97,
	98, 97, 93,
	93, 94, 98,
	99, 98, 94,
	94, 95, 99,
	100, 29, 24,
	24, 96, 100,
	101, 100, 96,
	96, 97, 101,
	102, 101, 97,
	97, 98, 102,
	103, 102, 98,
	98, 99, 103,
	104, 34, 29,
	29, 100, 104,
	105, 104, 100,
	100, 101, 105,
	106, 105, 101,
	101, 102, 106,
	107, 106, 102,
	102, 103, 107,
	108, 39, 34,
	34, 104, 108,
	109, 108, 104,
	104, 105, 109,
	110, 109, 105,
	105, 106, 110,
	111, 110, 106,
	106, 107, 111,
	112, 44, 39,
	39, 108, 112,
	113, 112, 108,
	108, 109, 113,
	114, 113, 109,
	109, 110, 114,
	115, 114, 110,
	110, 111, 115,
	116, 49, 44,
	44, 112, 116,
	117, 116, 112,
	112, 113, 117,
	118, 117, 113,
	113, 114, 118,
	119, 118, 114,
	114, 115, 119,
	120, 54, 49,
	49, 116, 120,
	121, 120, 116,
	116, 117, 121,
	122, 121, 117,
	117, 118, 122,
	123, 122, 118,
	118, 119, 123,
	124, 59, 54,
	54, 120, 124,
	125, 124, 120,
	120, 121, 125,
	126, 125, 121,
	121, 122, 126,
	127, 126, 122,
	122, 123, 127,
	128, 64, 59,
	59, 124, 128,
	129, 128, 124,
	124, 125, 129,
	130, 129, 125,
	125, 126, 130,
	131, 130, 126,
	126, 127, 131,
	132, 69, 64,
	64, 128, 132,
	133, 132, 128,
	128, 129, 133,
	134, 133, 129,
	129, 130, 134,
	135, 134, 130,
	130, 131, 135,
	136, 74, 69,
	69, 132, 136,
	137, 136, 132,
	132, 133, 137,
	138, 137, 133,
	133, 134, 138,
	139, 138, 134,
	134, 135, 139,
	140, 79, 74,
	74, 136, 140,
	141, 140, 136,
	136, 137, 141,
	142, 141, 137,
	137, 138, 142,
	143, 142, 138,
	138, 139, 143,
	80, 4, 79,
	79, 140, 80,
	81, 80, 140,
	140, 141, 81,
	82, 81, 141,
	141, 142, 82,
	83, 82, 142,
	142, 143, 83,
	148, 87, 83,
	83, 144, 148,
	149, 148, 144,
	144, 145, 149,
	150, 149, 145,
	145, 146, 150,
	151, 150, 146,
	146, 147, 151,
	152, 91, 87,
	87, 148, 152,
	153, 152, 148,
	148, 149, 153,
	154, 153, 149,
	149, 150, 154,
	155, 154, 150,
	150, 151, 155,
	156, 95, 91,
	91, 152, 156,
	157, 156, 152,
	152, 153, 157,
	158, 157, 153,
	153, 154, 158,
	159, 158, 154,
	154, 155, 159,
	160, 99, 95,
	95, 156, 160,
	161, 160, 156,
	156, 157, 161,
	162, 161, 157,
	157, 158, 162,
	163, 162, 158,
	158, 159, 163,
	164, 103, 99,
	99, 160, 164,
	165, 164, 160,
	160, 161, 165,
	166, 165, 161,
	161, 162, 166,
	167, 166, 162,
	162, 163, 167,
	168, 107, 103,
	103, 164, 168,
	169, 168, 164,
	164, 165, 169,
	170, 169, 165,
	165, 166, 170,
	171, 170, 166,
	166, 167, 171,
	172, 111, 107,
	107, 168, 172,
	173, 172, 168,
	168, 169, 173,
	174, 173, 169,
	169, 170, 174,
	175, 174, 170,
	170, 171, 175,
	176, 115, 111,
	111, 172, 176,
	177, 176, 172,
	172, 173, 177,
	178, 177, 173,
	173, 174, 178,
	179, 178, 174,
	174, 175, 179,
	180, 119, 115,
	115, 176, 180,
	181, 180, 176,
	176, 177, 181,
	182, 181, 177,
	177, 178, 182,
	183, 182, 178,
	178, 179, 183,
	184, 123, 119,
	119, 180, 184,
	185, 184, 180,
	180, 181, 185,
	186, 185, 181,
	181, 182, 186,
	187, 186, 182,
	182, 183, 187,
	188, 127, 123,
	123, 184, 188,
	189, 188, 184,
	184, 185, 189,
	190, 189, 185,
	185, 186, 190,
	191, 190, 186,
	186, 187, 191,
	192, 131, 127,
	127, 188, 192,
	193, 192, 188,
	188, 189, 193,
	194, 193, 189,
	189, 190, 194,
	195, 194, 190,
	190, 191, 195,
	196, 135, 131,
	131, 192, 196,
	197, 196, 192,
	192, 193, 197,
	198, 197, 193,
	193, 194, 198,
	199, 198, 194,
	194, 195, 199,
	200, 139, 135,
	135, 196, 200,
	201, 200, 196,
	196, 197, 201,
	202, 201, 197,
	197, 198, 202,
	203, 202, 198,
	198, 199, 203,
	204, 143, 139,
	139, 200, 204,
	205, 204, 200,
	200, 201, 205,
	206, 205, 201,
	201, 202, 206,
	207, 206, 202,
	202, 203, 207,
	144, 83, 143,
	143, 204, 144,
	145, 144, 204,
	204, 205, 145,
	146, 145, 205,
	205, 206, 146,
	147, 146, 206,
	206, 207, 147,
	212, 151, 147,
	147, 208, 212,
	213, 212, 208,
	208, 209, 213,
	214, 213, 209,
	209, 210, 214,
	211, 214, 210,
	210, 211, 211,
	215, 155, 151,
	151, 212, 215,
	216, 215, 212,
	212, 213, 216,
	217, 216, 213,
	213, 214, 217,
	211, 217, 214,
	214, 211, 211,
	218, 159, 155,
	155, 215, 218,
	219, 218, 215,
	215, 216, 219,
	220, 219, 216,
	216, 217, 220,
	211, 220, 217,
	217, 211, 211,
	221, 163, 159,
	159, 218, 221,
	222, 221, 218,
	218, 219, 222,
	223, 222, 219,
	219, 220, 223,
	211, 223, 220,
	220, 211, 211,
	224, 167, 163,
	163, 221, 224,
	225, 224, 221,
	221, 222, 225,
	226, 225, 222,
	222, 223, 226,
	211, 226, 223,
	223, 211, 211,
	227, 171, 167,
	167, 224, 227,
	228, 227, 224,
	224, 225, 228,
	229, 228, 225,
	225, 226, 229,
	211, 229, 226,
	226, 211, 211,
	230, 175, 171,
	171, 227, 230,
	231, 230, 227,
	227, 228, 231,
	232, 231, 228,
	228, 229, 232,
	211, 232, 229,
	229, 211, 211,
	233, 179, 175,
	175, 230, 233,
	234, 233, 230,
	230, 231, 234,
	235, 234, 231,
	231, 232, 235,
	211, 235, 232,
	232, 211, 211,
	236, 183, 179,
	179, 233, 236,
	237, 236, 233,
	233, 234, 237,
	238, 237, 234,
	234, 235, 238,
	211, 238, 235,
	235, 211, 211,
	239, 187, 183,
	183, 236, 239,
	240, 239, 236,
	236, 237, 240,
	241, 240, 237,
	237, 238, 241,
	211, 241, 238,
	238, 211, 211,
	242, 191, 187,
	187, 239, 242,
	243, 242, 239,
	239, 240, 243,
	244, 243, 240,
	240, 241, 244,
	211, 244, 241,
	241, 211, 211,
	245, 195, 191,
	191, 242, 245,
	246, 245, 242,
	242, 243, 246,
	247, 246, 243,
	243, 244, 247,
	211, 247, 244,
	244, 211, 211,
	248, 199, 195,
	195, 245, 248,
	249, 248, 245,
	245, 246, 249,
	250, 249, 246,
	246, 247, 250,
	211, 250, 247,
	247, 211, 211,
	251, 203, 199,
	199, 248, 251,
	252, 251, 248,
	248, 249, 252,
	253, 252, 249,
	249, 250, 253,
	211, 253, 250,
	250, 211, 211,
	254, 207, 203,
	203, 251, 254,
	255, 254, 251,
	251, 252, 255,
	256, 255, 252,
	252, 253, 256,
	211, 256, 253,
	253, 211, 211,
	208, 147, 207,
	207, 254, 208,
	209, 208, 254,
	254, 255, 209,
	210, 209, 255,
	255, 256, 210,
	211, 210, 256,
	256, 211, 211,
	263, 262, 257,
	257, 258, 263,
	264, 263, 258,
	258, 259, 264,
	265, 264, 259,
	259, 260, 265,
	266, 265, 260,
	260, 261, 266,
	268, 267, 262,
	262, 263, 268,
	269, 268, 263,
	263, 264, 269,
	270, 269, 264,
	264, 265, 270,
	271, 270, 265,
	265, 266, 271,
	273, 272, 267,
	267, 268, 273,
	274, 273, 268,
	268, 269, 274,
	275, 274, 269,
	269, 270, 275,
	276, 275, 270,
	270, 271, 276,
	278, 277, 272,
	272, 273, 278,
	279, 278, 273,
	273, 274, 279,
	280, 279, 274,
	274, 275, 280,
	281, 280, 275,
	275, 276, 281,
	283, 282, 277,
	277, 278, 283,
	284, 283, 278,
	278, 279, 284,
	285, 284, 279,
	279, 280, 285,
	286, 285, 280,
	280, 281, 286,
	288, 287, 282,
	282, 283, 288,
	289, 288, 283,
	283, 284, 289,
	290, 289, 284,
	284, 285, 290,
	291, 290, 285,
	285, 286, 291,
	293, 292, 287,
	287, 288, 293,
	294, 293, 288,
	288, 289, 294,
	295, 294, 289,
	289, 290, 295,
	296, 295, 290,
	290, 291, 296,
	258, 257, 292,
	292, 293, 258,
	259, 258, 293,
	293, 294, 259,
	260, 259, 294,
	294, 295, 260,
	261, 260, 295,
	295, 296, 261,
	301, 266, 261,
	261, 297, 301,
	302, 301, 297,
	297, 298, 302,
	303, 302, 298,
	298, 299, 303,
	304, 303, 299,
	299, 300, 304,
	305, 271, 266,
	266, 301, 305,
	306, 305, 301,
	301, 302, 306,
	307, 306, 302,
	302, 303, 307,
	308, 307, 303,
	303, 304, 308,
	309, 276, 271,
	271, 305, 309,
	310, 309, 305,
	305, 306, 310,
	311, 310, 306,
	306, 307, 311,
	312, 311, 307,
	307, 308, 312,
	313, 281, 276,
	276, 309, 313,
	314, 313, 309,
	309, 310, 314,
	315, 314, 310,
	310, 311, 315,
	316, 315, 311,
	311, 312, 316,
	317, 286, 281,
	281, 313, 317,
	318, 317, 313,
	313, 314, 318,
	319, 318, 314,
	314, 315, 319,
	320, 319, 315,
	315, 316, 320,
	321, 291, 286,
	286, 317, 321,
	322, 321, 317,
	317, 318, 322,
	323, 322, 318,
	318, 319, 323,
	324, 323, 319,
	319, 320, 324,
	325, 296, 291,
	291, 321, 325,
	326, 325, 321,
	321, 322, 326,
	327, 326, 322,
	322, 323, 327,
	328, 327, 323,
	323, 324, 328,
	297, 261, 296,
	296, 325, 297,
	298, 297, 325,
	325, 326, 298,
	299, 298, 326,
	326, 327, 299,
	300, 299, 327,
	327, 328, 300,
	335, 334, 329,
	329, 330, 335,
	336, 335, 330,
	330, 331, 336,
	337, 336, 331,
	331, 332, 337,
	338, 337, 332,
	332, 333, 338,
	340, 339, 334,
	334, 335, 340,
	341, 340, 335,
	335, 336, 341,
	342, 341, 336,
	336, 337, 342,
	343, 342, 337,
	337, 338, 343,
	345, 344, 339,
	339, 340, 345,
	346, 345, 340,
	340, 341, 346,
	347, 346, 341,
	341, 342, 347,
	348, 347, 342,
	342, 343, 348,
	350, 349, 344,
	344, 345, 350,
	351, 350, 345,
	345, 346, 351,
	352, 351, 346,
	346, 347, 352,
	353, 352, 347,
	347, 348, 353,
	355, 354, 349,
	349, 350, 355,
	356, 355, 350,
	350, 351, 356,
	357, 356, 351,
	351, 352, 357,
	358, 357, 352,
	352, 353, 358,
	360, 359, 354,
	354, 355, 360,
	361, 360, 355,
	355, 356, 361,
	362, 361, 356,
	356, 357, 362,
	363, 362, 357,
	357, 358, 363,
	365, 364, 359,
	359, 360, 365,
	366, 365, 360,
	360, 361, 366,
	367, 366, 361,
	361, 362, 367,
	368, 367, 362,
	362, 363, 368,
	330, 329, 364,
	364, 365, 330,
	331, 330, 365,
	365, 366, 331,
	332, 331, 366,
	366, 367, 332,
	333, 332, 367,
	367, 368, 333,
	373, 338, 333,
	333, 369, 373,
	374, 373, 369,
	369, 370, 374,
	375, 374, 370,
	370, 371, 375,
	376, 375, 371,
	371, 372, 376,
	377, 343, 338,
	338, 373, 377,
	378, 377, 373,
	373, 374, 378,
	379, 378, 374,
	374, 375, 379,
	380, 379, 375,
	375, 376, 380,
	381, 348, 343,
	343, 377, 381,
	382, 381, 377,
	377, 378, 382,
	383, 382, 378,
	378, 379, 383,
	384, 383, 379,
	379, 380, 384,
	385, 353, 348,
	348, 381, 385,
	386, 385, 381,
	381, 382, 386,
	387, 386, 382,
	382, 383, 387,
	388, 387, 383,
	383, 384, 388,
	389, 358, 353,
	353, 385, 389,
	390, 389, 385,
	385, 386, 390,
	391, 390, 386,
	386, 387, 391,
	392, 391, 387,
	387, 388, 392,
	393, 363, 358,
	358, 389, 393,
	394, 393, 389,
	389, 390, 394,
	395, 394, 390,
	390, 391, 395,
	396, 395, 391,
	391, 392, 396,
	397, 368, 363,
	363, 393, 397,
	398, 397, 393,
	393, 394, 398,
	399, 398, 394,
	394, 395, 399,
	400, 399, 395,
	395, 396, 400,
	369, 333, 368,
	368, 397, 369,
	370, 369, 397,
	397, 398, 370,
	371, 370, 398,
	398, 399, 371,
	372, 371, 399,
	399, 400, 372,
	406, 401, 401,
	401, 402, 406,
	407, 406, 402,
	402, 403, 407,
	408, 407, 403,
	403, 404, 408,
	409, 408, 404,
	404, 405, 409,
	410, 401, 401,
	401, 406, 410,
	411, 410, 406,
	406, 407, 411,
	412, 411, 407,
	407, 408, 412,
	413, 412, 408,
	408, 409, 413,
	414, 401, 401,
	401, 410, 414,
	415, 414, 410,
	410, 411, 415,
	416, 415, 411,
	411, 412, 416,
	417, 416, 412,
	412, 413, 417,
	418, 401, 401,
	401, 414, 418,
	419, 418, 414,
	414, 415, 419,
	420, 419, 415,
	415, 416, 420,
	421, 420, 416,
	416, 417, 421,
	422, 401, 401,
	401, 418, 422,
	423, 422, 418,
	418, 419, 423,
	424, 423, 419,
	419, 420, 424,
	425, 424, 420,
	420, 421, 425,
	426, 401, 401,
	401, 422, 426,
	427, 426, 422,
	422, 423, 427,
	428, 427, 423,
	423, 424, 428,
	429, 428, 424,
	424, 425, 429,
	430, 401, 401,
	401, 426, 430,
	431, 430, 426,
	426, 427, 431,
	432, 431, 427,
	427, 428, 432,
	433, 432, 428,
	428, 429, 433,
	434, 401, 401,
	401, 430, 434,
	435, 434, 430,
	430, 431, 435,
	436, 435, 431,
	431, 432, 436,
	437, 436, 432,
	432, 433, 437,
	438, 401, 401,
	401, 434, 438,
	439, 438, 434,
	434, 435, 439,
	440, 439, 435,
	435, 436, 440,
	441, 440, 436,
	436, 437, 441,
	442, 401, 401,
	401, 438, 442,
	443, 442, 438,
	438, 439, 443,
	444, 443, 439,
	439, 440, 444,
	445, 444, 440,
	440, 441, 445,
	446, 401, 401,
	401, 442, 446,
	447, 446, 442,
	442, 443, 447,
	448, 447, 443,
	443, 444, 448,
	449, 448, 444,
	444, 445, 449,
	450, 401, 401,
	401, 446, 450,
	451, 450, 446,
	446, 447, 451,
	452, 451, 447,
	447, 448, 452,
	453, 452, 448,
	448, 449, 453,
	454, 401, 401,
	401, 450, 454,
	455, 454, 450,
	450, 451, 455,
	456, 455, 451,
	451, 452, 456,
	457, 456, 452,
	452, 453, 457,
	458, 401, 401,
	401, 454, 458,
	459, 458, 454,
	454, 455, 459,
	460, 459, 455,
	455, 456, 460,
	461, 460, 456,
	456, 457, 461,
	462, 401, 401,
	401, 458, 462,
	463, 462, 458,
	458, 459, 463,
	464, 463, 459,
	459, 460, 464,
	465, 464, 460,
	460, 461, 465,
	402, 401, 401,
	401, 462, 402,
	403, 402, 462,
	462, 463, 403,
	404, 403, 463,
	463, 464, 404,
	405, 404, 464,
	464, 465, 405,
	470, 409, 405,
	405, 466, 470,
	471, 470, 466,
	466, 467, 471,
	472, 471, 467,
	467, 468, 472,
	473, 472, 468,
	468, 469, 473,
	474, 413, 409,
	409, 470, 474,
	475, 474, 470,
	470, 471, 475,
	476, 475, 471,
	471, 472, 476,
	477, 476, 472,
	472, 473, 477,
	478, 417, 413,
	413, 474, 478,
	479, 478, 474,
	474, 475, 479,
	480, 479, 475,
	475, 476, 480,
	481, 480, 476,
	476, 477, 481,
	482, 421, 417,
	417, 478, 482,
	483, 482, 478,
	478, 479, 483,
	484, 483, 479,
	479, 480, 484,
	485, 484, 480,
	480, 481, 485,
	486, 425, 421,
	421, 482, 486,
	487, 486, 482,
	482, 483, 487,
	488, 487, 483,
	483, 484, 488,
	489, 488, 484,
	484, 485, 489,
	490, 429, 425,
	425, 486, 490,
	491, 490, 486,
	486, 487, 491,
	492, 491, 487,
	487, 488, 492,
	493, 492, 488,
	488, 489, 493,
	494, 433, 429,
	429, 490, 494,
	495, 494, 490,
	490, 491, 495,
	496, 495, 491,
	491, 492, 496,
	497, 496, 492,
	492, 493, 497,
	498, 437, 433,
	433, 494, 498,
	499, 498, 494,
	494, 495, 499,
	500, 499, 495,
	495, 496, 500,
	501, 500, 496,
	496, 497, 501,
	502, 441, 437,
	437, 498, 502,
	503, 502, 498,
	498, 499, 503,
	504, 503, 499,
	499, 500, 504,
	505, 504, 500,
	500, 501, 505,
	506, 445, 441,
	441, 502, 506,
	507, 506, 502,
	502, 503, 507,
	508, 507, 503,
	503, 504, 508,
	509, 508, 504,
	504, 505, 509,
	510, 449, 445,
	445, 506, 510,
	511, 510, 506,
	506, 507, 511,
	512, 511, 507,
	507, 508, 512,
	513, 512, 508,
	508, 509, 513,
	514, 453, 449,
	449, 510, 514,
	515, 514, 510,
	510, 511, 515,
	516, 515, 511,
	511, 512, 516,
	517, 516, 512,
	512, 513, 517,
	518, 457, 453,
	453, 514, 518,
	519, 518, 514,
	514, 515, 519,
	520, 519, 515,
	515, 516, 520,
	521, 520, 516,
	516, 517, 521,
	522, 461, 457,
	457, 518, 522,
	523, 522, 518,
	518, 519, 523,
	524, 523, 519,
	519, 520, 524,
	525, 524, 520,
	520, 521, 525,
	526, 465, 461,
	461, 522, 526,
	527, 526, 522,
	522, 523, 527,
	528, 527, 523,
	523, 524, 528,
	529, 528, 524,
	524, 525, 529,
	466, 405, 465,
	465, 526, 466,
	467, 466, 526,
	526, 527, 467,
	468, 467, 527,
	527, 528, 468,
	469, 468, 528,
	528, 529, 469
};

GLuint gProgram;
GLuint gVAO;
GLuint gTexture;

int gRenderWidth = 0;
int gRenderHeight = 0;

int gSamples = 0;
unsigned char* gPixels = nullptr;
vec3* gStoragePixels = nullptr;

unsigned int gCores;
std::thread* gThreads = nullptr;

float gFpsTime = 0.0f;
int gFpsCount = 0;

vec3 gEyePos;
vec3 gPrevEyePos;
double gPrevPosX;
double gPrevPosY;
float gTargetRotX;
float gTargetRotY;
float gRotX;
float gRotY;

int gLevel = MAX_LEVEL;

inline float clampf(float x, float min, float max) {
	if (x < min) return min;
	if (x > max) return max;
	return x;
}

inline vec3 random_in_unit_sphere()
{
	// https://datagenetics.com/blog/january32020/index.html
	float theta = two_pi_real_dist(re);
	float v = real_dist(re);
	float phi = acosf((2.0f*v) - 1.0f);
	float r = powf(real_dist(re), 1.0f/3.0f);
	return vec3(r*sinf(phi)*cos(theta), r*sinf(phi)*sin(theta), r*cos(phi));
}

struct aabb
{
	vec3 min{};
	vec3 max{};

	// -- Implicit basic constructors --
	constexpr aabb() = default;
	constexpr aabb(aabb const& s) = default;

	// -- Explicit basic constructors --
	inline constexpr aabb(const vec3& min, const vec3& max) :
		min(min), max(max)
	{
	}
};

inline bool hitAABB(const ray3& r, const aabb& aabb, float minT, float maxT)
{
	{ // x
		auto t0 = fmin((aabb.min.x - r.origin.x) / r.direction.x, (aabb.max.x - r.origin.x) / r.direction.x);
		auto t1 = fmax((aabb.min.x - r.origin.x) / r.direction.x, (aabb.max.x - r.origin.x) / r.direction.x);
		minT = fmax(t0, minT);
		maxT = fmin(t1, maxT);
		if (maxT <= minT)
		{
			return false;
		}
	}

	{ // y
		auto t0 = fmin((aabb.min.y - r.origin.y) / r.direction.y, (aabb.max.y - r.origin.y) / r.direction.y);
		auto t1 = fmax((aabb.min.y - r.origin.y) / r.direction.y, (aabb.max.y - r.origin.y) / r.direction.y);
		minT = fmax(t0, minT);
		maxT = fmin(t1, maxT);
		if (maxT <= minT)
		{
			return false;
		}
	}

	{ // z
		auto t0 = fmin((aabb.min.z - r.origin.z) / r.direction.z, (aabb.max.z - r.origin.z) / r.direction.z);
		auto t1 = fmax((aabb.min.z - r.origin.z) / r.direction.z, (aabb.max.z - r.origin.z) / r.direction.z);
		minT = fmax(t0, minT);
		maxT = fmin(t1, maxT);
		if (maxT <= minT)
		{
			return false;
		}
	}

	return true;
}

inline aabb surroundingBox(const aabb& box0, const aabb& box1) {
    vec3 small(fmin(box0.min.x, box1.min.x),
               fmin(box0.min.y, box1.min.y),
               fmin(box0.min.z, box1.min.z));

    vec3 big  (fmax(box0.max.x, box1.max.x),
               fmax(box0.max.y, box1.max.y),
               fmax(box0.max.z, box1.max.z));

    return aabb(small,big);
}


struct hit
{
	vec3 point{};
	vec3 normal{};
	float t{};
	bool frontFace{};
	vec3 color{};
	vec3 emit{};

	// -- Implicit basic constructors --
	constexpr hit() = default;
	constexpr hit(hit const& s) = default;

	inline void faceNormal(const ray3& r, const vec3& outwardNormal)
	{
		frontFace = vec3::dot(r.direction, outwardNormal) < 0.0f;
		normal = frontFace ? outwardNormal : -outwardNormal;
	}
};

struct baseObject
{
	int id{};
	aabb box{};

	// -- Implicit basic constructors --
	constexpr baseObject() = default;
	constexpr baseObject(baseObject const& s) = default;

	// -- Explicit basic constructors --
	inline constexpr baseObject(int id) :
		id(id)
	{
	}
};

struct lambertianSphere
{
	baseObject base{};
	vec3 center{};
	float radius{};
	vec3 color{};
	vec3 emit{};

	// -- Implicit basic constructors --
	constexpr lambertianSphere() = default;
	constexpr lambertianSphere(lambertianSphere const& s) = default;

	// -- Explicit basic constructors --
	inline constexpr lambertianSphere(const vec3& center, float radius, const vec3& color, const vec3& emit) :
		base(1), center(center), radius(radius), color(color), emit(emit)
	{
		base.box = aabb(center - vec3(radius, radius, radius), center + vec3(radius, radius, radius));
	}
};

struct metalSphere
{
	baseObject base{};
	vec3 center{};
	float radius{};
	vec3 color{};
	float fuzz{};

	// -- Implicit basic constructors --
	constexpr metalSphere() = default;
	constexpr metalSphere(metalSphere const& s) = default;

	// -- Explicit basic constructors --
	inline constexpr metalSphere(const vec3& center, float radius, const vec3& color, float fuzz) :
		base(2), center(center), radius(radius), color(color), fuzz(fuzz)
	{
		base.box = aabb(center - vec3(radius, radius, radius), center + vec3(radius, radius, radius));
	}
};

struct triangle
{
	vec3 v0;
	vec3 v1;
	vec3 v2;
	vec3 n0;
	vec3 n1;
	vec3 n2;

	// -- Implicit basic constructors --
	constexpr triangle() = default;
	constexpr triangle(triangle const&) = default;

	// -- Explicit basic constructors --
	inline triangle(const vec3& v0, const vec3& v1, const vec3& v2, const vec3& n0, const vec3& n1, const vec3& n2) :
		v0(v0), v1(v1), v2(v2), n0(n0), n1(n1), n2(n2)
	{
	}
};

struct node
{
	baseObject* pObject;
	aabb box;

	node* pLeft;
	node* pRight;
};

bool box_x_compare(const baseObject* a, const baseObject* b)
{
	return a->box.min.x < b->box.min.x;
}

bool box_y_compare(const baseObject* a, const baseObject* b)
{
	return a->box.min.y < b->box.min.y;
}


bool box_z_compare(const baseObject* a, const baseObject* b)
{
	return a->box.min.z < b->box.min.z;
}


void nodeContructor(node* pNode, const std::vector<baseObject*>& objects, size_t start, size_t end)
{
	size_t object_span = end - start;

	int axis = axis_int_dist(re);
	auto comparator = (axis == 0) ? box_x_compare
					: (axis == 1) ? box_y_compare
								  : box_z_compare;
	if (object_span == 1)
	{
		pNode->pObject = objects[start];
		pNode->pLeft = nullptr;
		pNode->pRight = nullptr;

		pNode->box = pNode->pObject->box;
		return;
	}

	if (object_span == 2)
	{
		if (comparator(objects[start], objects[start + 1]) == true)
		{
			pNode->pLeft = new node();
			pNode->pLeft->pObject = objects[start];
			pNode->pLeft->box = pNode->pLeft->pObject->box;
			pNode->pLeft->pLeft = nullptr;
			pNode->pLeft->pRight = nullptr;

			pNode->pRight = new node();
			pNode->pRight->pObject = objects[start + 1];
			pNode->pRight->box = pNode->pRight->pObject->box;
			pNode->pRight->pLeft = nullptr;
			pNode->pRight->pRight = nullptr;
		}
		else
		{
			pNode->pLeft = new node();
			pNode->pLeft->pObject = objects[start + 1];
			pNode->pLeft->box = pNode->pLeft->pObject->box;
			pNode->pLeft->pLeft = nullptr;
			pNode->pLeft->pRight = nullptr;

			pNode->pRight = new node();
			pNode->pRight->pObject = objects[start];
			pNode->pRight->box = pNode->pRight->pObject->box;
			pNode->pRight->pLeft = nullptr;
			pNode->pRight->pRight = nullptr;
		}
	}
	else
	{
		auto tmpObjects = objects;
		std::sort(tmpObjects.begin() + start, tmpObjects.begin() + end, comparator);

		auto mid = start + object_span / 2;
		pNode->pLeft = new node();
		nodeContructor(pNode->pLeft, tmpObjects, start, mid);
		pNode->pRight = new node();
		nodeContructor(pNode->pRight, tmpObjects, mid, end);
	}

	pNode->pObject = nullptr;
	pNode->box = surroundingBox(pNode->pLeft->box, pNode->pRight->box);
}

void nodeDestructor(node* pNode)
{
	if (pNode->pLeft != nullptr) nodeDestructor(pNode->pLeft);
	if (pNode->pRight != nullptr) nodeDestructor(pNode->pRight);

	delete pNode->pLeft;
	delete pNode->pRight;
}

node* gWorld = nullptr;
std::vector<baseObject*> gObjects;
lambertianSphere gFloor(vec3(0.0f, -100.0f, 0.0f), 100.0f, vec3(0.5f, 0.5f, 0.5f), vec3(0.0f, 0.0f, 0.0f));

bool hitLambertianSphere(const ray3& r, const lambertianSphere& s, float minT, float maxT, hit& hit, vec3& scatterDirection)
{
	vec3 oc = r.origin - s.center;
	float a = vec3::dot(r.direction, r.direction);
	float halfb = vec3::dot(oc, r.direction);
	float c = vec3::dot(oc, oc) - s.radius*s.radius;
	float discriminant = halfb*halfb - a*c;
	if (discriminant < 0.0f) return false;

	float sqrtd = sqrtf(discriminant);

	float root = (-halfb - sqrtd)/a;
	if (root < minT || maxT < root)
	{
		float root = (-halfb + sqrtd)/a;
		if (root < minT || maxT < root)
		{
			return false;
		}
	}

	hit.t = root;
	hit.point = r.at(root);
	vec3 outwardNormal = (hit.point - s.center)/s.radius;
	hit.faceNormal(r, outwardNormal);
	hit.color = s.color;
	hit.emit = s.emit;

	{
		vec3 randomUnitSphere = random_in_unit_sphere();

		scatterDirection = hit.normal + randomUnitSphere.normalize();
		if ((fabsf(scatterDirection.x) < 1e-6f) && (fabsf(scatterDirection.y) < 1e-6f) && (fabsf(scatterDirection.z) < 1e-6f))
		{
			scatterDirection = hit.normal;
		}
	}

	return true;
}

bool hitMetalSphere(const ray3& r, const metalSphere& s, float minT, float maxT, hit& hit, vec3& scatterDirection)
{
	vec3 oc = r.origin - s.center;
	float a = vec3::dot(r.direction, r.direction);
	float halfb = vec3::dot(oc, r.direction);
	float c = vec3::dot(oc, oc) - s.radius*s.radius;
	float discriminant = halfb*halfb - a*c;
	if (discriminant < 0.0f) return false;

	float sqrtd = sqrtf(discriminant);

	float root = (-halfb - sqrtd)/a;
	if (root < minT || maxT < root)
	{
		float root = (-halfb + sqrtd)/a;
		if (root < minT || maxT < root)
		{
			return false;
		}
	}

	hit.t = root;
	hit.point = r.at(root);
	vec3 outwardNormal = (hit.point - s.center)/s.radius;
	hit.faceNormal(r, outwardNormal);
	hit.color = s.color;
	hit.emit = vec3(0.0f, 0.0f, 0.0f);

	scatterDirection = r.direction - hit.normal*2.0f*vec3::dot(r.direction, hit.normal) + random_in_unit_sphere()*s.fuzz;
	return vec3::dot(scatterDirection, hit.normal) > 0.0f;
}

bool hitTriangle(const ray3& r, const triangle& triangle, float minT, float maxT, hit& hit, vec3& scatterDirection)
{
	vec3 e1 = triangle.v1 - triangle.v0;
	vec3 e2 = triangle.v2 - triangle.v0;

	vec3 pvec = vec3::cross(r.direction, e2);
	float det = vec3::dot(e1, pvec);
	if (det > -0.0001f && det < 0.0001f)
	{
		return false;
	}

	float invDet = 1.0f / det;
	vec3 tvec = r.origin - triangle.v0;
	float u = vec3::dot(tvec, pvec)*invDet;
	if (u < 0.0f || u > 1.0f)
	{
		return false;
	}

	vec3 qvec = vec3::cross(tvec, e1);
	float v = vec3::dot(r.direction, qvec)*invDet;
	if (v < 0.0f || (u + v) > 1.0f)
	{
		return false;
	}

	float root = vec3::dot(e2, qvec)*invDet;
	if (root < minT || maxT < root)
	{
		return false;
	}

	hit.t = root;
	hit.point = r.at(root);
	vec3 outwardNormal = triangle.n1*u + triangle.n2*v + triangle.n0*(1.0f - u - v);
	hit.faceNormal(r, outwardNormal);

	{
		vec3 randomUnitSphere = random_in_unit_sphere();

		scatterDirection = hit.normal + randomUnitSphere.normalize();
		if ((fabsf(scatterDirection.x) < 1e-6f) && (fabsf(scatterDirection.y) < 1e-6f) && (fabsf(scatterDirection.z) < 1e-6f))
		{
			scatterDirection = hit.normal;
		}
	}

	return true;
}

struct lambertianMesh
{
	baseObject base{};
	vec3 color{};
	vec3 emit{};
	std::vector<triangle> triangles{};

	// -- Implicit basic constructors --
	constexpr lambertianMesh() = default;
	constexpr lambertianMesh(lambertianMesh const& mesh) = default;

	// -- Explicit basic constructors --
	inline lambertianMesh(const std::vector<vec3>& vertices, const std::vector<vec3>& normals, const std::vector<int> indices, const vec3& scale, const vec3& position, const vec3& color, const vec3& emit) :
		base(3), color(color), emit(emit)
	{
		auto tmpVertices = vertices;
		for (auto& v : tmpVertices)
		{
			v.x = v.x*scale.x + position.x;
			v.y = v.y*scale.y + position.y;
			v.z = v.z*scale.z + position.z;
		}

		vec3 min(FLT_MAX, FLT_MAX, FLT_MAX);
		for (const auto& v : tmpVertices)
		{
			min.x = fmin(min.x, v.x);
			min.y = fmin(min.y, v.y);
			min.z = fmin(min.z, v.z);
		}

		vec3 max(-FLT_MIN, -FLT_MAX, -FLT_MAX);
		for (const auto& v : tmpVertices)
		{
			max.x = fmax(max.x, v.x);
			max.y = fmax(max.y, v.y);
			max.z = fmax(max.z, v.z);
		}

		base.box = aabb(min, max);

		int triangleCount = indices.size() / 3;
		for (size_t i = 0; i < triangleCount; ++i)
		{
			int index0 = indices[i*3 + 0];
			int index1 = indices[i*3 + 1];
			int index2 = indices[i*3 + 2];
			triangles.push_back(triangle
			(
				tmpVertices[index0], tmpVertices[index1], tmpVertices[index2],
				normals[index0], normals[index1], normals[index2]
			));
		}
	}
};

bool hitLambertianMesh(const ray3& r, const lambertianMesh& mesh, float minT, float maxT, hit& hit, vec3& scatterDirection)
{
	bool isHit = false;
	float closestSoFar = maxT;

	for(const auto& triangle : mesh.triangles)
	{
		if (hitTriangle(r, triangle, minT, closestSoFar, hit, scatterDirection) == true)
		{
			isHit = true;
			closestSoFar = hit.t;
		}
	}

	if (isHit == true)
	{
		hit.color = mesh.color;
		hit.emit = mesh.emit;
		return true;
	}

	return false;
}

bool nodeHit(node* pNode, const ray3& r, float minT, float maxT, hit& hit, vec3& scatterDirection)
{
	if (hitAABB(r, pNode->box, minT, maxT) == false) return false;
	if (pNode->pObject != nullptr)
	{
		if (pNode->pObject->id == 1)
		{
			if (hitLambertianSphere(r, *(lambertianSphere*)(pNode->pObject), minT, maxT, hit, scatterDirection) == true)
			{
				return true;
			}
		}
		else if (pNode->pObject->id == 2)
		{
			if (hitMetalSphere(r, *(metalSphere*)(pNode->pObject), minT, maxT, hit, scatterDirection) == true)
			{
				return true;
			}
		}
		else if (pNode->pObject->id == 3)
		{
			if (hitLambertianMesh(r, *(lambertianMesh*)(pNode->pObject), minT, maxT, hit, scatterDirection) == true)
			{
				return true;
			}
		}
		return false;
	}

	bool hitLeft = nodeHit(pNode->pLeft, r, minT, maxT, hit, scatterDirection);
	bool hitRight = nodeHit(pNode->pRight, r, minT, hitLeft == true ? hit.t : maxT, hit, scatterDirection);

	return hitLeft || hitRight;
}

#define USE_NODE 1
vec3 rayColor(const ray3& r, int depth)
{
	if (depth <= 0) return vec3();

	hit hit;
	vec3 scatterDirection;

	bool isHit = false;
	float closestSoFar = 1000.0f;

	if (hitLambertianSphere(r, gFloor, 0.001f, closestSoFar, hit, scatterDirection) == true)
	{
		isHit = true;
		closestSoFar = hit.t;
	}

#if USE_NODE
if (nodeHit(gWorld, r, 0.001f, closestSoFar, hit, scatterDirection) == true)
	{
		isHit = true;
		closestSoFar = hit.t;
	}
#else
	for (const auto& o : gObjects)
	{
		if (o->id == 1)
		{
			if (hitLambertianSphere(r, *(lambertianSphere*)(o), 0.001f, closestSoFar, hit, scatterDirection) == true)
			{
				isHit = true;
				closestSoFar = hit.t;
			}
		}
		else if (o->id == 2)
		{
			if (hitMetalSphere(r, *(metalSphere*)(o), 0.001f, closestSoFar, hit, scatterDirection) == true)
			{
				isHit = true;
				closestSoFar = hit.t;
			}
		}
		else if (o->id == 3)
		{
			if (hitLambertianTriangle(r, *(lambertianTriangle*)(o), 0.001f, closestSoFar, hit, scatterDirection) == true)
			{
				isHit = true;
				closestSoFar = hit.t;
			}
		}
	}
#endif

	if (isHit)
	{
		vec3 target = hit.point + scatterDirection;
		return hit.emit + rayColor(ray3(hit.point, target - hit.point), depth - 1)*hit.color;
		// return vec3(hit.normal.x + 1.0f, hit.normal.y + 1.0f, hit.normal.z + 1.0f)*0.5f;
	}

	return vec3(0.5f, 0.7f, 1.0f);
	// return vec3(0.0f, 0.0f, 0.0f);
}

void render(int start, int stop, const vec3& origin, const vec3& horizontal, const vec3& vertical, const vec3& lowerLeftCorner)
{
	for (int j = start; j < stop; ++j)
	{
		for (int i = 0; i < gRenderWidth; ++i)
		{
			float u = (i + real_dist(re)) / (gRenderWidth - 1);
			float v = (j + real_dist(re)) / (gRenderHeight - 1);
			ray3 r(origin, lowerLeftCorner + horizontal*u + vertical*v - origin);

			int storageIndex = (i + j*gRenderWidth);
			vec3 pixelColor(gStoragePixels[storageIndex]);
			pixelColor = pixelColor + rayColor(r, RAY_DEPTH);

			int index = (i + j*gRenderWidth)*4;
			gPixels[index + 0] = (int)(256*clampf(sqrtf(pixelColor.x/gSamples), 0.0f, 0.999f));
			gPixels[index + 1] = (int)(256*clampf(sqrtf(pixelColor.y/gSamples), 0.0f, 0.999f));
			gPixels[index + 2] = (int)(256*clampf(sqrtf(pixelColor.z/gSamples), 0.0f, 0.999f));
			gPixels[index + 3] = 255;

			gStoragePixels[storageIndex] = pixelColor;
		}
	}
}

auto init() -> bool
{
	{
		auto vertexShader = glCreateShader(GL_VERTEX_SHADER);
		glShaderSource(vertexShader, 1, &renderVertexShaderSource, nullptr);
		GL_CHECK(glCompileShader(vertexShader));
		{
			GLint success;
			GL_CHECK(glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success));
			if (!success)
			{
				GLint infoLength = 0;
				glGetShaderiv(vertexShader, GL_INFO_LOG_LENGTH, &infoLength);
				char* infoLog = new char[infoLength];
				GL_CHECK(glGetShaderInfoLog(vertexShader, infoLength, &infoLength, infoLog));
				std::cout << "ERROR::SHADER_COMPILATION_ERROR of type: " << "VERTEX_SHADER" << "\n" << infoLog << "\n -- --------------------------------------------------- -- " << std::endl;
				delete[] infoLog;
				GL_CHECK(glDeleteShader(vertexShader));
			}
		}

		auto fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
		glShaderSource(fragmentShader, 1, &renderFragmentShaderSource, nullptr);
		GL_CHECK(glCompileShader(fragmentShader));
		{
			GLint success;
			GL_CHECK(glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success));
			if(!success)
			{
				GLint infoLength = 0;
				glGetShaderiv(fragmentShader, GL_INFO_LOG_LENGTH, &infoLength);
				char* infoLog = new char[infoLength];
				GL_CHECK(glGetShaderInfoLog(fragmentShader, infoLength, &infoLength, infoLog));
				std::cout << "ERROR::SHADER_COMPILATION_ERROR of type: " << "FRAGMENT_SHADER" << "\n" << infoLog << "\n -- --------------------------------------------------- -- " << std::endl;
				delete [] infoLog;
				GL_CHECK(glDeleteShader(fragmentShader));
			}
		}

		gProgram = glCreateProgram();
		glAttachShader(gProgram, vertexShader);
		glAttachShader(gProgram, fragmentShader);
		glLinkProgram(gProgram);

		glDeleteShader(vertexShader);
		glDeleteShader(fragmentShader);
	}

	glGenVertexArrays(1, &gVAO);

	glGenTextures(1, &gTexture);
	glBindTexture(GL_TEXTURE_2D, gTexture);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_BASE_LEVEL, 0);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_LEVEL, 0);
		// glTexStorage2D(GL_TEXTURE_2D, 1, GL_RGBA8, gRenderWidth, gRenderHeight);

	on_size();

	return true;
}

void resetRenderer(int level)
{
	int sub = powf(2, level - 1);

	gSamples = 0;
	gRenderWidth = gWidth / sub;
	gRenderHeight = gHeight / sub;

	if (gStoragePixels != nullptr)
	{
		delete [] gStoragePixels;
	}
	if (gPixels != nullptr)
	{
		delete [] gPixels;
	}

	gStoragePixels = new vec3[gRenderWidth*gRenderHeight];
	memset(gStoragePixels, 0, gRenderWidth*gRenderHeight*sizeof(vec3));

	gPixels = new unsigned char[gRenderWidth*gRenderHeight*4];
	memset(gPixels, 0, gRenderWidth*gRenderHeight*4);

	glDeleteTextures(1, &gTexture);
	glGenTextures(1, &gTexture);
	glBindTexture(GL_TEXTURE_2D, gTexture);
		glTexStorage2D(GL_TEXTURE_2D, 1, GL_RGBA8, gRenderWidth, gRenderHeight);
}

void on_size()
{
	gLevel = MAX_LEVEL;
	resetRenderer(gLevel);

	glViewport(0, 0, gWidth, gHeight);
}

void on_key(int key, int action)
{

}

void on_mouse(double xpos, double ypos)
{
	int state = glfwGetMouseButton(g_pWindow, GLFW_MOUSE_BUTTON_LEFT);
	if (state == GLFW_PRESS)
	{
		gTargetRotX += (xpos - gPrevPosX)*0.01f;
		gTargetRotY += (ypos - gPrevPosY)*0.01f;

		if (gTargetRotY <= -M_PI / 2.0f) gTargetRotY = -M_PI / 2.0f + 0.01f;
		if (gTargetRotY >= M_PI / 2.0f)  gTargetRotY = M_PI / 2.0f - 0.01f;
	}
	gPrevPosX = xpos;
	gPrevPosY = ypos;
}

auto update() -> void
{
	if (fabs(gTargetRotX - gRotX) < 0.01f)
	{
		gRotX = gTargetRotX;
	}
	else
	{
		gRotX += 0.05f * (gTargetRotX - gRotX);
	}

	if (fabs(gTargetRotY - gRotY) < 0.01f)
	{
		gRotY = gTargetRotY;
	}
	else
	{
		gRotY += 0.05f * (gTargetRotY - gRotY);
	}

	vec4 eyePos = mat4::rotate(0.0f, 1.0f, 0.0f, -gRotX) * mat4::rotate(1.0f, 0.0f, 0.0f, -gRotY) * vec4(0.0f, 0.0f, 7.0f, 0.0f);
	gEyePos = vec3(eyePos.x, eyePos.y, eyePos.z);
	if (gEyePos != gPrevEyePos)
	{
		if (gLevel < MAX_LEVEL)
		{
			gLevel = MAX_LEVEL;
			resetRenderer(gLevel);
		}
		else
		{
			gSamples = 0;
			memset(gStoragePixels, 0, gRenderWidth*gRenderHeight*sizeof(vec3));
			memset(gPixels, 0, gRenderWidth*gRenderHeight*4);
		}
	}
	gPrevEyePos = gEyePos;

	if (gSamples > MAX_SAMPLES_PER_PIXEL) return;

	if (gLevel > 2 && gSamples > SAMPLES_PER_PIXEL_NEXT_LEVEL)
	{
		--gLevel;
		resetRenderer(gLevel);
	}
	++gSamples;

	auto start = high_resolution_clock::now();

	// Camera
	float aspect = (float)gRenderWidth / gRenderHeight;
	float h = tanf(0.7853f/2.0f);
	float viewportHeight = 2.0f*h;
	float viewportWidth = aspect*viewportHeight;
	float focalLength = 1.0f;
	//vec3 origin = vec3(0.0f, 0.0f, -5.0f);
	vec3 origin = gEyePos;
	vec3 lookAt = vec3(0.0f, 0.0f, 0.0f);
	vec3 w = (origin - lookAt).normalize();
	vec3 u = vec3::cross(vec3(0.0f, 1.0f, 0.0f), w).normalize();
	vec3 v = vec3::cross(w, u);

	vec3 horizontal = u*viewportWidth;
	vec3 vertical = v*viewportHeight;
	vec3 lowerLeftCorner = origin - horizontal/2.0f - vertical/2.0f - w;

	// Thread rendering
	int step = gCores*2 > gRenderHeight ? gRenderHeight : gCores*2;
	int tasksPerThread = (gRenderHeight + step - 1)/step;
	for (int i = 0; i < step; ++i)
	{
		int start = i*tasksPerThread;
		int stop = (i+1)*tasksPerThread;
		if (stop > gRenderHeight)
		{
			stop = gRenderHeight;
		}
		gThreads[i] = std::thread(render, start, stop, origin, horizontal, vertical, lowerLeftCorner);
	}

	for (int i = 0; i < step; ++i)
	{
		gThreads[i].join();
	}

	auto stop = high_resolution_clock::now();
	auto duration = duration_cast<microseconds>(stop - start);

	gFpsTime += duration.count() / 1000000.0f;
	++gFpsCount;
	if (gFpsCount > 10 || gSamples == MAX_SAMPLES_PER_PIXEL)
	{
		std::cout << "FPS: " << gFpsCount / gFpsTime << " - " << gSamples << std::endl;
		gFpsTime = 0;
		gFpsCount = 0;
	}

	glTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, gRenderWidth, gRenderHeight, GL_RGBA, GL_UNSIGNED_BYTE, gPixels);
}

auto draw() -> void
{
	glUseProgram(gProgram);
	glBindVertexArray(gVAO);
	glDrawArrays(GL_TRIANGLES, 0, 3);
}

auto main() -> int
{
	gCores = std::thread::hardware_concurrency();
	std::cout << gCores << " concurrent threads are supported" << std::endl;

	gObjects.push_back((baseObject*)new lambertianSphere(vec3(-1.0f, 0.5f, 0.0f), 0.5f, vec3(1.0f, 0.5f, 0.5f), vec3(0.0f, 0.0f, 0.0f)));
	gObjects.push_back((baseObject*)new lambertianSphere(vec3(0.0f, 0.5f, 0.0f), 0.5f, vec3(0.6f, 0.6f, 0.6f), vec3(1.2f, 1.2f, 1.2f)));
	gObjects.push_back((baseObject*)new lambertianSphere(vec3(1.0f, 0.5f, 0.0f), 0.5f, vec3(0.5f, 0.5f, 1.0f), vec3(0.0f, 0.0f, 0.0f)));
	gObjects.push_back((baseObject*)new lambertianSphere(vec3(1.0f, 1.0f, 2.0f), 1.0f, vec3(0.5f, 1.0f, 0.5f), vec3(0.0f, 0.0f, 0.0f)));

	gObjects.push_back((baseObject*)new metalSphere(vec3(-2.0f, 0.5f, 0.0f), 0.5f, vec3(0.8f, 0.8f, 0.8f), 0.1f));
	gObjects.push_back((baseObject*)new metalSphere(vec3(2.0f, 0.5f, 0.0f), 0.5f, vec3(0.8f, 0.8f, 0.8f), 0.1f));
	gObjects.push_back((baseObject*)new metalSphere(vec3(-1.0f, 1.0f, 2.0f), 1.0f, vec3(0.8f, 0.8f, 0.8f), 0.1f));

	gObjects.push_back((baseObject*)new lambertianMesh
	(
		teapotVertices, teapotNormals, teapotIndices,
		vec3(1.2f, 1.2f, 1.2f), vec3(0.0f, 0.5f, -1.6f),
		vec3(0.8f, 1.0f, 0.2f), vec3(0.0f, 0.0f, 0.0f)
	));

	for (int i = -4; i < 4; ++i)
	{
		for (int j = -4; j < 4; j++)
		{
			if (i*i + j*j <= 8) continue;
			vec3 center = vec3(i + 0.9f*real_dist(re), 0.2f + 0.3*real_dist(re), j + 0.9f*real_dist(re));
			int metal = metal_int_dist(re);
			if (metal == 0)
			{
				gObjects.push_back((baseObject*)new lambertianSphere(center, 0.2f, vec3(real_dist(re), real_dist(re), real_dist(re)), vec3(0.0f, 0.0f, 0.0f)));
			}
			else
			{
				gObjects.push_back((baseObject*)new metalSphere(center, 0.2f, vec3(real_dist(re), real_dist(re), real_dist(re)), real_dist(re)));
			}
		}
	}

	gWorld = new node();
	nodeContructor(gWorld, gObjects, 0, gObjects.size());

	gThreads = new std::thread[gCores*2];

	int result = run();

	if (gStoragePixels != nullptr)
	{
		delete [] gStoragePixels;
	}
	if (gPixels != nullptr)
	{
		delete [] gPixels;
	}
	delete [] gThreads;

	for (size_t i = 0; i<gObjects.size(); ++i)
	{
		delete gObjects[i];
	}

	nodeDestructor(gWorld);
	delete gWorld;

	return result;
}
